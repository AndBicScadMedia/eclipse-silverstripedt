/* The following code was generated by JFlex 1.2.2 on 11/14/11 2:33 PM */

/*******************************************************************************
 * Copyright (c) 2004, 2010 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

package ca.edchipman.silverstripepdt.parser;

import ca.edchipman.silverstripepdt.regions.SilverStripeRegionContext;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.Logger;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 11/14/11 2:33 PM from the specification file
 * <tt>file:/Z:/eclipse/workspace/ca.edchipman.silverStripePDT/DevTimeSupport/SedModel/SSTokenizer/devel/SSTokenizer.jflex</tt>
 */
public class SSTokenizer implements BlockTokenizer, DOMRegionContext, SilverStripeRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_SS_UNCACHED_CONTENT = 44;
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_SS_COMMENT = 32;
  final public static int ST_BLOCK_TAG_SCAN = 30;
  final public static int ST_SS_CACHEBLOCK_CONTENT = 42;
  final public static int ST_DHTML_ATTRIBUTE_VALUE = 14;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 8;
  final public static int ST_DHTML_TAG_CLOSE = 15;
  final public static int ST_DHTML_EQUALS = 13;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  final public static int ST_XML_ATTRIBUTE_VALUE = 19;
  final public static int ST_XML_ATTRIBUTE_NAME = 17;
  final public static int ST_XML_EQUALS = 18;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 25;
  final public static int ST_XML_ELEMENT_DECLARATION = 26;
  final public static int ST_XML_DECLARATION_CLOSE = 21;
  final public static int ST_SS_UNCACHED_END = 45;
  final public static int ST_SS_INCLUDE_CONTENT = 40;
  final public static int ST_SS_CONDITIONAL_END = 35;
  final public static int ST_SS_CONTROL_CONTENT = 38;
  final public static int ST_XML_DOCTYPE_DECLARATION = 22;
  final public static int ST_CDATA_END = 2;
  final public static int ST_PI_WS = 6;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 27;
  final public static int ST_SS_REQUIREMENT_CONTENT = 36;
  final public static int ST_SS_CACHEBLOCK_END = 43;
  final public static int ST_XML_ATTLIST_DECLARATION = 28;
  final public static int ST_SS_CONTROL_END = 39;
  final public static int ST_XML_PI_EQUALS = 9;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 29;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 24;
  final public static int ST_DHTML_ATTRIBUTE_NAME = 12;
  final public static int ST_SS_CONDITIONAL_CONTENT = 34;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 23;
  final public static int ST_SS = 31;
  final public static int ST_PI_CONTENT = 7;
  final public static int ST_SS_REQUIREMENT_END = 37;
  final public static int ST_PI = 5;
  final public static int ST_SS_COMMENT_END = 33;
  final public static int ST_XML_DECLARATION = 20;
  final public static int ST_XML_TAG_NAME = 16;
  final public static int ST_XML_PI_TAG_CLOSE = 11;
  final public static int ST_SS_INCLUDE_END = 41;
  final public static int ST_XML_COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\24\2\0\1\15\22\0\1\15\1\23\1\12\1\65"+
    "\1\103\1\20\1\13\1\14\1\62\1\22\1\17\1\17\1\64\1\7"+
    "\1\6\1\3\12\16\1\11\1\72\1\1\1\47\1\2\1\4\1\17"+
    "\1\36\1\74\1\34\1\35\1\53\1\70\1\40\1\40\1\60\1\40"+
    "\1\40\1\31\1\27\1\61\1\50\1\52\1\40\1\67\1\66\1\37"+
    "\1\71\2\40\1\25\1\51\1\40\1\33\1\0\1\21\1\0\1\10"+
    "\1\0\1\55\1\73\1\75\1\56\1\41\1\101\1\76\1\107\1\44"+
    "\1\40\1\110\1\32\1\30\1\46\1\45\1\52\1\105\1\42\1\43"+
    "\1\54\1\106\1\40\1\40\1\26\1\57\1\40\1\102\1\63\1\104"+
    "\71\0\1\100\10\0\27\77\1\0\37\77\1\0\72\77\2\0\13\77"+
    "\2\0\10\77\1\0\65\77\1\0\104\77\11\0\44\77\3\0\2\77"+
    "\4\0\36\77\70\0\131\77\22\0\7\77\16\0\2\100\56\0\106\100"+
    "\32\0\2\100\44\0\1\77\1\100\3\77\1\0\1\77\1\0\24\77"+
    "\1\0\54\77\1\0\7\77\3\0\1\77\1\0\1\77\1\0\1\77"+
    "\1\0\1\77\1\0\22\77\15\0\14\77\1\0\102\77\1\0\14\77"+
    "\1\0\44\77\1\0\4\100\11\0\65\77\2\0\2\77\2\0\2\77"+
    "\3\0\34\77\2\0\10\77\2\0\2\77\67\0\46\77\2\0\1\77"+
    "\7\0\46\77\12\0\21\100\1\0\27\100\1\0\3\100\1\0\1\100"+
    "\1\0\2\100\1\0\1\100\13\0\33\77\5\0\3\77\56\0\32\77"+
    "\5\0\1\100\12\77\10\100\15\0\12\100\6\0\1\100\107\77\2\0"+
    "\5\77\1\0\17\77\1\0\4\77\1\0\1\77\17\100\2\77\2\100"+
    "\1\0\4\100\2\0\12\100\u0207\0\3\100\1\0\65\77\2\0\1\100"+
    "\1\77\20\100\3\0\4\100\3\0\12\77\2\100\2\0\12\100\21\0"+
    "\3\100\1\0\10\77\2\0\2\77\2\0\26\77\1\0\7\77\1\0"+
    "\1\77\3\0\4\77\2\0\1\100\1\0\7\100\2\0\2\100\2\0"+
    "\3\100\11\0\1\100\4\0\2\77\1\0\3\77\2\100\2\0\12\100"+
    "\2\77\20\0\1\100\2\0\6\77\4\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\2\77\1\0\2\77\1\0\2\77\2\0\1\100\1\0"+
    "\5\100\4\0\2\100\2\0\3\100\13\0\4\77\1\0\1\77\7\0"+
    "\12\100\2\100\3\77\14\0\3\100\1\0\7\77\1\0\1\77\1\0"+
    "\3\77\1\0\26\77\1\0\7\77\1\0\2\77\1\0\5\77\2\0"+
    "\1\100\1\77\10\100\1\0\3\100\1\0\3\100\22\0\1\77\5\0"+
    "\12\100\21\0\3\100\1\0\10\77\2\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\2\77\2\0\4\77\2\0\1\100\1\77\6\100\3\0"+
    "\2\100\2\0\3\100\10\0\2\100\4\0\2\77\1\0\3\77\4\0"+
    "\12\100\22\0\2\100\1\0\6\77\3\0\3\77\1\0\4\77\3\0"+
    "\2\77\1\0\1\77\1\0\2\77\3\0\2\77\3\0\3\77\3\0"+
    "\10\77\1\0\3\77\4\0\5\100\3\0\3\100\1\0\4\100\11\0"+
    "\1\100\17\0\11\100\21\0\3\100\1\0\10\77\1\0\3\77\1\0"+
    "\27\77\1\0\12\77\1\0\5\77\4\0\7\100\1\0\3\100\1\0"+
    "\4\100\7\0\2\100\11\0\2\77\4\0\12\100\22\0\2\100\1\0"+
    "\10\77\1\0\3\77\1\0\27\77\1\0\12\77\1\0\5\77\4\0"+
    "\7\100\1\0\3\100\1\0\4\100\7\0\2\100\7\0\1\77\1\0"+
    "\2\77\4\0\12\100\22\0\2\100\1\0\10\77\1\0\3\77\1\0"+
    "\27\77\1\0\20\77\4\0\6\100\2\0\3\100\1\0\4\100\11\0"+
    "\1\100\10\0\2\77\4\0\12\100\221\0\56\77\1\0\1\77\1\100"+
    "\2\77\7\100\5\0\6\77\1\100\10\100\1\0\12\100\47\0\2\77"+
    "\1\0\1\77\2\0\2\77\1\0\1\77\2\0\1\77\6\0\4\77"+
    "\1\0\7\77\1\0\3\77\1\0\1\77\1\0\1\77\2\0\2\77"+
    "\1\0\2\77\1\0\1\77\1\100\2\77\6\100\1\0\2\100\1\77"+
    "\2\0\5\77\1\0\1\100\1\0\6\100\2\0\12\100\76\0\2\100"+
    "\6\0\12\100\13\0\1\100\1\0\1\100\1\0\1\100\4\0\2\100"+
    "\10\77\1\0\41\77\7\0\24\100\1\0\6\100\4\0\6\100\1\0"+
    "\1\100\1\0\25\100\3\0\7\100\1\0\1\100\346\0\46\77\12\0"+
    "\47\77\11\0\1\77\1\0\2\77\1\0\3\77\1\0\1\77\1\0"+
    "\2\77\1\0\5\77\51\0\1\77\1\0\1\77\1\0\1\77\13\0"+
    "\1\77\1\0\1\77\1\0\1\77\3\0\2\77\3\0\1\77\5\0"+
    "\3\77\1\0\1\77\1\0\1\77\1\0\1\77\1\0\1\77\3\0"+
    "\2\77\3\0\2\77\1\0\1\77\50\0\1\77\11\0\1\77\2\0"+
    "\1\77\2\0\2\77\7\0\2\77\1\0\1\77\1\0\7\77\50\0"+
    "\1\77\4\0\1\77\10\0\1\77\u0c06\0\234\77\4\0\132\77\6\0"+
    "\26\77\2\0\6\77\2\0\46\77\2\0\6\77\2\0\10\77\1\0"+
    "\1\77\1\0\1\77\1\0\1\77\1\0\37\77\2\0\65\77\1\0"+
    "\7\77\1\0\1\77\3\0\3\77\1\0\7\77\3\0\4\77\2\0"+
    "\6\77\4\0\15\77\5\0\3\77\1\0\7\77\323\0\15\100\4\0"+
    "\1\100\104\0\1\77\3\0\2\77\2\0\1\77\121\0\3\77\u0e82\0"+
    "\1\100\1\0\1\77\31\0\11\77\6\100\1\0\5\100\13\0\124\77"+
    "\4\0\2\100\2\0\2\100\2\0\132\77\1\0\3\100\6\0\50\77"+
    "\u1cd3\0\u51a6\77\u0c5a\0\u2ba4\77\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    73,   146,   219,   292,   365,   438,   511,   584,   657, 
      730,   803,   876,   949,  1022,  1095,  1168,  1241,  1314,  1387, 
     1460,  1533,  1606,  1679,  1752,  1825,  1898,  1971,  2044,  2117, 
     2190,  2263,  2336,  2409,  2482,  2555,  2628,  2701,  2774,  2847, 
     2920,  2993,  3066,  3139,  3212,  3285,  3358,  3431,  3504,  3577, 
     3650,  3723,  3796,  3650,  3869,  3723,  3796,  3869,  3942,  3650, 
     3650,  3869,  4015,  4088,  4161,  4234,  4307,  4380,  4453,  4526, 
     3650,  3869,  4599,  4672,  4745,  3650,  4818,  4818,  4891,  4964, 
     5037,  4599,  3650,  5110,  5183,  5256,  3650,  5329,  5402,  5475, 
     5548,  5621,  5694,  3650,  5767,  5840,  5913,  5986,  6059,  6132, 
     6205,  6278,  3650,  6351,  6424,  6497,  6570,  6643,  6716,  6789, 
     6862,  3650,  6935,  7008,  7081,  7154,  7227,  7300,  7373,  7446, 
     7446,  7519,  7592,  7665,  7738,  7738,  7811,  7884,  7957,  8030, 
     8030,  8103,  8176,  8249,  8322,  3650,  8395,  8395,  8468,  8541, 
     8614,  8687,  3650,  3650,  3869,  8760,  8833,  8906,  8979,  9052, 
     9125,  3650,  3869,  9198,  3650,  3869,  9271,  3650,  3869,  9344, 
     3650,  3869,  9417,  3650,  3869,  9490,  3650,  3869,  9563,  3650, 
     3869,  9636,  3650,  3650,  9709,  9782,  9855,  9928, 10001,  3650, 
    10074, 10147, 10220, 10293, 10366, 10439, 10512,  3650, 10585, 10658, 
    10731,  3650,  3650,  4818, 10804,  4964,  3650, 10877,  5037,  5110, 
     9709,  5329,  5402, 10950,  5475,  3650, 11023,  5548,  3650, 11096, 
    11169,  6351, 11242,  6497,  3650, 11315,  6570, 11388, 11461,  9782, 
    11534, 11607, 11680,  7154,  3650, 11753, 11826,  7446, 11899,  7519, 
     3650, 11972, 12045, 12118, 12118, 12191, 12264,  7665,  7446,  7738, 
    12337,  7811,  3650, 12410,  7884,  7957,  7738,  8030, 12483,  8103, 
     3650, 12556, 12629, 12702, 12702, 12775, 12848, 12921,  8395, 12994, 
     8468,  3650, 13067, 13140, 13213, 13213, 13286, 13359, 13432, 13505, 
    13578, 13651, 13724,  3650, 13797, 13870, 13943, 14016, 14089,  3650, 
     3650,  3650,  3650,  3650,  3650, 14162, 14235, 14308, 14381, 14454, 
    14527,  3650, 14600, 14673,  3650, 14746, 14819, 14892,  3650,  3650, 
     4234, 14965, 15038, 15111, 15184, 15257, 15330, 15403, 15476, 15549, 
    15622, 15695, 15768, 15841, 11972, 15914, 15914, 12556, 15987, 15987, 
    16060, 13067, 16133, 16133, 16206, 16279, 16352, 16425, 16498, 16571, 
    16644, 16717, 16790, 16863,  3650,  3650, 16936, 17009,  3650, 17082, 
    17155, 17228,  3650, 17301, 17374, 17447, 17520, 17593, 17666, 17739, 
    17812, 17885, 17958, 18031, 18031, 18104, 18177, 18250, 18323, 18396, 
    12191, 12775, 18469, 13286, 18542, 18615, 18688, 18761, 18834, 18907, 
    18980, 19053, 19126,  3650, 19199, 19272, 19345, 19418, 19491, 19564, 
    19637, 19710, 19783, 19856, 19929, 20002, 20075, 20148, 20221, 20294, 
    20294, 20367, 20440, 20513, 20586, 20659, 20732, 20805, 20878, 20951, 
    21024, 21097, 21170, 21243, 21316, 21389, 21462, 21535, 21608, 21681, 
    21754, 21827, 21900, 21973, 22046, 19418, 22119, 22192, 22265, 22338, 
    22411, 22484, 22557, 22630, 22703, 22776, 22849, 22922, 22995, 22995, 
     6351, 23068, 23141, 23141, 23214, 23287, 23360,  3650,  3650, 23433, 
    23506, 23579,  3650, 23652, 23725, 23798, 23871, 23944, 24017, 24090, 
     3650, 24163, 24236, 24309, 24382, 24455, 24528, 24601, 24674, 24747, 
    24820, 24893, 24966, 25039, 25112, 25185, 25185, 25258, 25331, 25404, 
     3650,  3650,  3650, 25477, 25550, 25623, 25696, 25769,  3650,  3650, 
    25842,  3650, 25915, 25988, 26061, 26134, 26207, 24674, 26280, 26353, 
    26426, 26499, 26499, 26572, 26645, 26718, 26791, 26864, 26937,  3650, 
    27010,  3650,  3650, 27083, 27156, 27229, 27302,  8249,  8614, 27375, 
    27448, 27521, 27594, 27083, 27667, 27740,  3650, 27813, 27886, 27959, 
     3650, 28032, 28105, 28178, 28251,  3650, 28324, 28397,  4234
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\57\1\60\11\57\1\61\4\57\1\62\42\57\1\63"+
    "\16\57\1\64\1\65\5\57\1\66\1\67\100\66\1\70"+
    "\1\71\5\66\1\63\1\72\17\63\1\73\2\63\1\74"+
    "\64\63\1\75\1\76\107\75\1\63\1\72\5\63\1\77"+
    "\14\63\1\74\65\63\1\72\2\63\1\100\1\101\2\63"+
    "\2\102\3\63\1\101\6\63\1\101\1\103\1\104\4\102"+
    "\1\63\10\102\1\105\2\102\1\63\10\102\1\105\1\102"+
    "\4\63\4\102\1\63\5\102\1\63\1\102\3\63\4\102"+
    "\1\63\1\72\2\63\1\100\1\106\7\63\1\106\6\63"+
    "\1\106\64\63\1\107\1\110\2\107\1\111\17\107\1\74"+
    "\64\107\1\63\1\72\2\63\1\112\1\101\2\63\2\113"+
    "\3\63\1\101\6\63\1\101\6\113\1\63\13\113\1\63"+
    "\12\113\4\63\4\113\1\63\5\113\1\63\1\113\3\63"+
    "\4\113\1\63\1\72\2\63\1\112\1\101\2\63\2\113"+
    "\3\63\1\101\6\63\1\101\6\113\1\63\13\113\1\114"+
    "\12\113\4\63\4\113\1\63\5\113\1\63\1\113\3\63"+
    "\4\113\1\115\1\72\1\63\1\116\1\117\1\101\4\115"+
    "\1\120\1\115\1\121\1\101\6\115\1\101\64\115\1\63"+
    "\1\72\2\63\1\122\17\63\1\74\65\63\1\72\1\123"+
    "\1\124\1\63\1\101\2\63\2\125\3\63\1\101\6\63"+
    "\1\101\6\125\1\63\13\125\1\63\12\125\4\63\4\125"+
    "\1\63\5\125\1\63\1\125\3\63\4\125\1\63\1\126"+
    "\1\123\1\124\1\63\1\101\2\63\2\125\3\63\1\101"+
    "\6\63\1\101\6\125\1\63\13\125\1\127\12\125\4\63"+
    "\4\125\1\63\5\125\1\63\1\125\3\63\4\125\1\130"+
    "\1\126\1\123\1\131\1\130\1\101\4\130\1\132\1\130"+
    "\1\133\1\101\6\130\1\101\64\130\1\63\1\72\3\63"+
    "\1\101\7\63\1\101\6\63\1\101\64\63\1\134\1\135"+
    "\1\136\1\137\4\134\2\140\6\134\1\141\4\134\6\142"+
    "\1\134\13\142\1\134\12\142\4\134\4\142\1\134\5\142"+
    "\1\134\1\142\1\143\1\144\1\134\4\142\1\63\1\135"+
    "\1\136\1\137\1\63\1\101\2\63\2\145\3\63\1\101"+
    "\2\63\1\146\3\63\1\101\6\145\1\63\13\145\1\63"+
    "\12\145\4\63\4\145\1\63\5\145\1\63\1\145\1\64"+
    "\1\65\1\63\4\145\1\63\1\135\1\136\1\137\1\63"+
    "\1\101\2\63\2\145\3\63\1\101\2\63\1\146\3\63"+
    "\1\101\6\145\1\63\13\145\1\147\12\145\4\63\4\145"+
    "\1\63\5\145\1\63\1\145\1\64\1\65\1\63\4\145"+
    "\1\150\1\135\1\136\1\151\1\150\1\101\4\150\1\152"+
    "\1\150\1\153\1\101\2\150\1\154\3\150\1\101\55\150"+
    "\1\155\1\156\5\150\1\63\1\157\1\160\2\63\1\101"+
    "\7\63\1\101\2\63\1\146\3\63\1\101\10\63\1\161"+
    "\1\162\2\63\1\163\11\63\1\163\1\63\1\162\1\161"+
    "\23\63\1\64\1\65\6\63\1\72\1\160\2\63\1\101"+
    "\7\63\1\101\6\63\1\101\6\63\1\164\56\63\1\72"+
    "\1\160\2\63\1\101\2\63\2\165\3\63\1\101\6\63"+
    "\1\101\6\165\1\164\13\165\1\63\12\165\4\63\4\165"+
    "\1\63\5\165\1\63\1\165\3\63\4\165\1\63\1\72"+
    "\1\160\2\63\1\101\7\63\1\101\6\63\1\101\6\63"+
    "\1\164\7\63\1\166\6\63\1\167\13\63\1\166\22\63"+
    "\1\170\1\72\1\160\1\171\1\170\1\101\4\170\1\172"+
    "\1\170\1\173\1\101\6\170\1\101\6\170\1\174\55\170"+
    "\1\175\1\72\1\160\1\176\1\175\1\101\4\175\1\177"+
    "\1\175\1\200\1\101\6\175\1\101\6\175\1\201\55\175"+
    "\1\202\1\72\1\160\1\203\1\202\1\101\4\202\1\204"+
    "\1\202\1\205\1\101\6\202\1\101\64\202\1\206\1\207"+
    "\1\210\106\206\1\211\1\72\1\160\1\212\1\211\1\101"+
    "\4\211\1\213\1\211\1\214\1\101\6\211\1\101\64\211"+
    "\1\215\1\216\1\217\106\215\1\220\1\221\107\220\1\63"+
    "\1\72\22\63\1\74\14\63\1\222\1\223\1\63\1\224"+
    "\26\63\1\225\1\63\1\226\10\63\1\227\2\63\1\230"+
    "\1\231\107\230\1\63\1\72\5\63\1\232\14\63\1\74"+
    "\64\63\1\233\1\234\22\233\1\74\64\233\1\63\1\72"+
    "\16\63\1\235\3\63\1\74\64\63\1\236\1\237\22\236"+
    "\1\74\64\236\1\63\1\72\16\63\1\240\3\63\1\74"+
    "\64\63\1\241\1\242\22\241\1\74\64\241\1\63\1\72"+
    "\16\63\1\243\3\63\1\74\64\63\1\244\1\245\22\244"+
    "\1\74\64\244\1\63\1\72\16\63\1\246\3\63\1\74"+
    "\64\63\1\247\1\250\22\247\1\74\64\247\1\63\1\72"+
    "\16\63\1\251\3\63\1\74\64\63\1\252\1\253\22\252"+
    "\1\74\64\252\1\63\1\72\16\63\1\254\3\63\1\74"+
    "\64\63\1\57\1\0\11\57\1\0\4\57\1\0\42\57"+
    "\1\0\16\57\2\0\5\57\3\0\1\255\1\256\13\0"+
    "\1\257\2\0\1\260\72\0\1\261\2\0\2\262\3\0"+
    "\1\261\6\0\1\261\6\262\1\0\13\262\1\0\12\262"+
    "\3\0\1\263\4\262\1\0\5\262\1\0\1\262\3\0"+
    "\4\262\2\0\1\264\2\0\1\261\2\0\2\265\3\0"+
    "\1\261\2\0\1\266\3\0\1\261\6\265\1\0\13\265"+
    "\1\0\12\265\4\0\4\265\1\0\5\265\1\0\1\265"+
    "\3\0\4\265\214\0\1\267\15\0\1\270\14\0\6\270"+
    "\1\0\13\270\1\0\12\270\4\0\4\270\1\0\4\270"+
    "\2\0\1\270\3\0\4\270\23\0\1\271\106\0\1\272"+
    "\76\0\1\273\103\0\1\274\113\0\1\101\7\0\1\101"+
    "\6\0\1\101\72\0\4\102\4\0\1\102\6\0\6\102"+
    "\1\0\13\102\1\0\12\102\4\0\4\102\1\0\7\102"+
    "\3\0\4\102\6\0\4\102\4\0\1\102\6\0\2\102"+
    "\2\275\2\102\1\0\13\102\1\0\12\102\4\0\4\102"+
    "\1\0\7\102\3\0\4\102\6\0\4\102\4\0\1\102"+
    "\6\0\2\102\1\275\1\276\2\102\1\0\13\102\1\0"+
    "\12\102\4\0\4\102\1\0\7\102\3\0\4\102\6\0"+
    "\4\102\4\0\1\102\6\0\2\102\2\277\2\102\1\0"+
    "\13\102\1\0\12\102\4\0\4\102\1\0\7\102\3\0"+
    "\4\102\5\0\1\106\7\0\1\106\6\0\1\106\66\0"+
    "\1\300\110\0\1\301\114\0\4\113\4\0\1\113\6\0"+
    "\6\113\1\0\13\113\1\0\12\113\4\0\4\113\1\0"+
    "\7\113\3\0\4\113\1\115\2\0\1\302\1\115\1\0"+
    "\4\115\1\0\1\115\2\0\6\115\1\0\65\115\1\0"+
    "\1\301\1\302\1\115\1\0\4\115\1\0\1\115\2\0"+
    "\6\115\1\0\64\115\1\120\2\303\1\304\1\120\1\303"+
    "\4\120\1\305\1\120\2\303\6\120\1\303\64\120\1\121"+
    "\2\306\1\307\1\121\1\306\4\121\1\306\1\121\1\305"+
    "\1\306\6\121\1\306\64\121\2\0\1\123\1\310\113\0"+
    "\4\125\4\0\1\125\6\0\6\125\1\0\13\125\1\0"+
    "\12\125\4\0\4\125\1\0\7\125\3\0\4\125\20\0"+
    "\1\311\2\0\1\271\65\0\1\130\2\0\1\312\1\130"+
    "\1\0\4\130\1\0\1\130\2\0\6\130\1\0\65\130"+
    "\1\0\1\123\1\313\1\130\1\0\4\130\1\0\1\130"+
    "\2\0\6\130\1\0\64\130\1\132\2\314\1\315\1\132"+
    "\1\314\4\132\1\316\1\132\2\314\6\132\1\314\64\132"+
    "\1\133\2\317\1\320\1\133\1\317\4\133\1\317\1\133"+
    "\1\316\1\317\6\133\1\317\64\133\1\134\3\0\21\134"+
    "\6\0\1\134\13\0\1\134\12\0\4\134\4\0\1\134"+
    "\5\0\1\134\1\0\3\134\7\0\1\255\14\0\1\257"+
    "\2\0\1\260\67\0\1\321\106\0\1\134\3\0\2\134"+
    "\4\140\4\134\1\140\6\134\6\142\1\134\13\142\1\134"+
    "\12\142\4\134\4\142\1\134\5\142\1\140\1\142\3\134"+
    "\4\142\1\134\1\0\1\264\1\0\21\134\6\0\1\134"+
    "\13\0\1\134\12\0\4\134\4\0\1\134\5\0\1\134"+
    "\1\0\3\134\12\0\4\142\4\0\1\142\6\0\6\142"+
    "\1\0\13\142\1\0\12\142\4\0\4\142\1\0\7\142"+
    "\3\0\4\142\1\134\3\0\21\134\6\0\1\134\13\0"+
    "\1\134\12\0\4\134\4\0\1\134\5\0\1\134\1\0"+
    "\1\134\1\322\1\134\4\0\1\134\3\0\4\134\1\323"+
    "\14\134\6\270\1\134\13\270\1\134\12\270\4\134\4\270"+
    "\1\134\4\270\1\0\1\134\1\270\3\134\4\270\6\0"+
    "\4\145\4\0\1\145\6\0\6\145\1\0\13\145\1\0"+
    "\12\145\4\0\4\145\1\0\7\145\3\0\4\145\2\0"+
    "\1\264\106\0\1\150\2\0\1\324\1\150\1\0\4\150"+
    "\1\0\1\150\2\0\6\150\1\0\65\150\1\0\1\321"+
    "\1\324\1\150\1\0\4\150\1\0\1\150\2\0\6\150"+
    "\1\0\64\150\1\152\2\325\1\326\1\152\1\325\4\152"+
    "\1\327\1\152\2\325\6\152\1\325\64\152\1\153\2\330"+
    "\1\331\1\153\1\330\4\153\1\330\1\153\1\327\1\330"+
    "\6\153\1\330\64\153\1\150\1\0\1\264\1\324\1\150"+
    "\1\0\4\150\1\0\1\150\2\0\6\150\1\0\65\150"+
    "\2\0\1\324\1\150\1\0\4\150\1\0\1\150\2\0"+
    "\6\150\1\0\56\150\1\332\6\150\2\0\1\324\1\150"+
    "\1\0\2\150\1\333\1\150\1\0\1\150\2\0\6\150"+
    "\1\0\6\333\1\150\13\333\1\150\12\333\4\150\4\333"+
    "\1\150\4\333\2\150\1\333\3\150\4\333\3\0\1\255"+
    "\14\0\1\257\2\0\1\334\132\0\1\335\2\0\1\335"+
    "\77\0\1\336\14\0\1\336\65\0\2\337\56\0\21\340"+
    "\1\341\67\340\6\0\4\165\4\0\1\165\6\0\6\165"+
    "\1\0\13\165\1\0\12\165\4\0\4\165\1\0\7\165"+
    "\3\0\4\165\51\0\1\342\5\0\1\342\122\0\1\343"+
    "\14\0\1\343\2\0\1\170\2\0\1\344\1\170\1\0"+
    "\4\170\1\0\1\170\2\0\6\170\1\0\64\170\1\172"+
    "\2\345\1\346\1\172\1\345\4\172\1\347\1\172\2\345"+
    "\6\172\1\345\64\172\1\350\2\351\1\352\1\353\1\351"+
    "\4\353\1\351\1\350\1\354\1\355\3\353\1\350\2\353"+
    "\1\355\6\353\1\350\27\353\1\350\13\353\2\350\1\353"+
    "\1\350\1\353\1\350\4\353\1\174\2\340\1\356\1\174"+
    "\1\340\4\174\1\340\1\174\2\340\3\174\1\357\2\174"+
    "\1\340\64\174\1\175\2\0\1\360\1\175\1\0\4\175"+
    "\1\0\1\175\2\0\6\175\1\0\64\175\1\177\2\361"+
    "\1\362\1\177\1\361\4\177\1\363\1\177\2\361\6\177"+
    "\1\361\64\177\1\200\2\364\1\365\1\200\1\364\4\200"+
    "\1\364\1\200\1\363\1\364\6\200\1\364\64\200\1\201"+
    "\2\340\1\366\1\201\1\340\4\201\1\340\1\201\2\340"+
    "\3\201\1\367\2\201\1\340\64\201\1\202\2\0\1\370"+
    "\1\202\1\0\4\202\1\0\1\202\2\0\6\202\1\0"+
    "\64\202\1\204\2\371\1\372\1\204\1\371\4\204\1\373"+
    "\1\204\2\371\6\204\1\371\64\204\1\374\2\375\1\376"+
    "\1\377\1\375\4\377\1\375\1\374\1\u0100\1\u0101\3\377"+
    "\1\374\2\377\1\u0101\6\377\1\374\27\377\1\374\13\377"+
    "\2\374\1\377\1\374\1\377\1\374\4\377\2\206\1\0"+
    "\110\206\1\0\20\206\1\u0102\65\206\1\211\2\0\1\u0103"+
    "\1\211\1\0\4\211\1\0\1\211\2\0\6\211\1\0"+
    "\64\211\1\213\2\u0104\1\u0105\1\213\1\u0104\4\213\1\u0106"+
    "\1\213\2\u0104\6\213\1\u0104\64\213\1\u0107\2\u0108\1\u0109"+
    "\1\u010a\1\u0108\4\u010a\1\u0108\1\u0107\1\u010b\1\u010c\3\u010a"+
    "\1\u0107\2\u010a\1\u010c\6\u010a\1\u0107\27\u010a\1\u0107\13\u010a"+
    "\2\u0107\1\u010a\1\u0107\1\u010a\1\u0107\4\u010a\2\215\1\0"+
    "\110\215\1\0\20\215\1\u010d\65\215\32\0\1\u010e\13\0"+
    "\1\u010f\103\0\1\u0110\115\0\1\u0111\32\0\1\u0112\64\0"+
    "\1\u0113\100\0\1\u0114\7\0\1\u0115\101\0\1\u0116\51\0"+
    "\1\u0117\103\0\1\u0118\110\0\1\u0119\110\0\1\u011a\110\0"+
    "\1\u011b\110\0\1\u011c\110\0\1\u011d\115\0\1\u011e\110\0"+
    "\1\u011f\23\0\1\u0120\62\0\1\261\2\0\2\u0121\3\0"+
    "\1\261\6\0\1\261\6\u0121\1\0\13\u0121\1\0\12\u0121"+
    "\4\0\4\u0121\1\0\5\u0121\1\0\1\u0121\3\0\4\u0121"+
    "\1\u0122\1\0\3\u0122\1\u0123\4\262\1\u0122\1\0\1\u0122"+
    "\1\u0123\1\262\1\u0122\1\0\3\u0122\1\u0123\6\262\1\u0122"+
    "\13\262\1\u0122\12\262\4\u0122\4\262\1\u0124\7\262\3\u0122"+
    "\4\262\16\0\1\u0125\7\0\1\u0126\62\0\1\u0122\1\0"+
    "\3\u0122\1\u0123\4\265\1\u0122\1\0\1\u0122\1\u0123\1\265"+
    "\1\u0122\1\0\3\u0122\1\u0123\6\265\1\u0122\13\265\1\u0122"+
    "\12\265\4\u0122\4\265\1\u0127\7\265\3\u0122\4\265\20\0"+
    "\1\266\100\0\1\u0128\14\0\6\u0128\1\0\13\u0128\1\0"+
    "\12\u0128\4\0\4\u0128\1\0\4\u0128\2\0\1\u0128\3\0"+
    "\4\u0128\6\0\1\u0129\1\0\1\270\5\0\1\270\6\0"+
    "\6\270\1\0\13\270\1\0\12\270\1\u012a\3\0\4\270"+
    "\1\0\4\270\2\0\1\270\3\0\4\270\33\0\1\u0120"+
    "\57\0\1\u012b\110\0\1\u012c\114\0\4\102\4\0\1\102"+
    "\6\0\4\102\2\u012d\1\0\13\102\1\0\12\102\4\0"+
    "\4\102\1\0\7\102\3\0\4\102\6\0\4\102\4\0"+
    "\1\102\6\0\4\102\1\u012d\1\u012e\1\0\13\102\1\0"+
    "\12\102\4\0\4\102\1\0\7\102\3\0\4\102\6\0"+
    "\4\102\4\0\1\102\6\0\6\102\1\0\13\102\1\0"+
    "\2\102\1\u012f\7\102\4\0\4\102\1\0\7\102\3\0"+
    "\4\102\12\303\1\305\76\303\14\306\1\305\74\306\12\314"+
    "\1\316\76\314\14\317\1\316\74\317\1\134\3\0\4\134"+
    "\1\u0130\14\134\6\u0128\1\134\13\u0128\1\134\12\u0128\4\134"+
    "\4\u0128\1\134\4\u0128\1\0\1\134\1\u0128\3\134\4\u0128"+
    "\1\134\3\0\2\134\1\u0131\1\134\1\323\5\134\1\323"+
    "\6\134\6\270\1\134\13\270\1\134\12\270\1\u0132\3\134"+
    "\4\270\1\134\4\270\1\0\1\134\1\270\3\134\4\270"+
    "\12\325\1\327\76\325\14\330\1\327\74\330\1\150\2\0"+
    "\1\324\1\150\1\0\2\150\1\u0133\1\150\1\0\1\150"+
    "\2\0\6\150\1\0\6\u0133\1\150\13\u0133\1\150\12\u0133"+
    "\4\150\4\u0133\1\150\4\u0133\2\150\1\u0133\3\150\4\u0133"+
    "\1\150\2\0\1\324\1\150\1\0\1\u0134\1\150\1\333"+
    "\1\150\1\0\1\150\2\0\1\333\5\150\1\0\6\333"+
    "\1\150\13\333\1\150\12\333\1\u0135\3\150\4\333\1\150"+
    "\4\333\2\150\1\333\3\150\4\333\34\0\1\u0136\40\0"+
    "\1\u0136\52\0\1\u0137\14\0\1\u0137\75\0\1\u0138\11\0"+
    "\1\u0138\100\0\1\u0139\22\0\1\u0139\115\0\2\u013a\14\0"+
    "\12\345\1\347\76\345\1\350\2\351\1\u013b\1\350\1\351"+
    "\4\350\1\351\1\350\1\347\1\351\6\350\1\351\64\350"+
    "\14\351\1\347\74\351\1\350\2\351\1\u013b\1\350\1\351"+
    "\4\350\1\351\1\350\1\u013c\1\351\6\350\1\351\64\350"+
    "\14\0\1\u013d\74\0\14\351\1\u013c\74\351\12\361\1\363"+
    "\76\361\14\364\1\363\74\364\12\371\1\373\76\371\1\374"+
    "\2\375\1\u013e\1\374\1\375\4\374\1\375\1\374\1\373"+
    "\1\375\6\374\1\375\64\374\14\375\1\373\74\375\1\374"+
    "\2\375\1\u013e\1\374\1\375\4\374\1\375\1\374\1\u013f"+
    "\1\375\6\374\1\375\64\374\14\0\1\u0140\74\0\14\375"+
    "\1\u013f\74\375\2\206\1\0\30\206\1\u0141\55\206\12\u0104"+
    "\1\u0106\76\u0104\1\u0107\2\u0108\1\u0142\1\u0107\1\u0108\4\u0107"+
    "\1\u0108\1\u0107\1\u0106\1\u0108\6\u0107\1\u0108\64\u0107\14\u0108"+
    "\1\u0106\74\u0108\1\u0107\2\u0108\1\u0142\1\u0107\1\u0108\4\u0107"+
    "\1\u0108\1\u0107\1\u0143\1\u0108\6\u0107\1\u0108\64\u0107\14\0"+
    "\1\u0144\74\0\14\u0108\1\u0143\74\u0108\2\215\1\0\30\215"+
    "\1\u0145\55\215\43\0\1\u0146\123\0\1\u0147\137\0\1\u0148"+
    "\100\0\1\u0149\56\0\1\u014a\113\0\1\u014b\137\0\1\u014c"+
    "\110\0\1\u014d\33\0\1\u014e\77\0\1\u014f\110\0\1\u0150"+
    "\135\0\1\u0151\54\0\1\u0121\1\0\11\u0121\1\0\4\u0121"+
    "\1\0\70\u0121\1\u0122\1\0\11\u0122\1\0\4\u0122\1\0"+
    "\51\u0122\1\0\17\u0122\1\0\3\u0122\1\u0123\5\u0122\1\0"+
    "\1\u0122\1\u0123\2\u0122\1\0\3\u0122\1\u0123\45\u0122\1\u0152"+
    "\16\u0122\16\0\1\u0125\53\0\1\u0153\34\0\1\u0154\15\0"+
    "\3\u0154\2\0\1\u0154\11\0\1\u0154\1\0\2\u0154\11\0"+
    "\1\u0154\2\0\3\u0154\3\0\1\u0154\15\0\1\u0155\1\0"+
    "\1\u0128\5\0\1\u0128\6\0\6\u0128\1\0\13\u0128\1\0"+
    "\12\u0128\1\u0156\3\0\4\u0128\1\0\4\u0128\2\0\1\u0128"+
    "\2\0\1\u0157\4\u0128\10\0\1\u0158\5\0\1\u0158\6\0"+
    "\6\u0158\1\0\13\u0158\1\0\12\u0158\4\0\4\u0158\1\0"+
    "\4\u0158\2\0\1\u0158\3\0\4\u0158\22\u0159\1\0\41\u0159"+
    "\1\0\24\u0159\6\0\1\102\1\u015a\2\102\4\0\1\102"+
    "\6\0\6\102\1\0\13\102\1\0\12\102\4\0\4\102"+
    "\1\0\7\102\3\0\4\102\6\0\4\102\4\0\1\102"+
    "\6\0\6\102\1\0\11\102\1\u015b\1\102\1\0\1\u015b"+
    "\11\102\4\0\4\102\1\0\7\102\3\0\4\102\1\134"+
    "\3\0\2\134\1\u015c\1\134\1\u0130\5\134\1\u0130\6\134"+
    "\6\u0128\1\134\13\u0128\1\134\12\u0128\1\u015d\3\134\4\u0128"+
    "\1\134\4\u0128\1\0\1\134\1\u0128\3\134\4\u0128\1\134"+
    "\3\0\4\134\1\u015e\5\134\1\u015e\6\134\6\u0158\1\134"+
    "\13\u0158\1\134\12\u0158\4\134\4\u0158\1\134\4\u0158\1\0"+
    "\1\134\1\u0158\3\134\4\u0158\1\u015f\3\u0159\16\u015f\1\134"+
    "\2\u015f\6\u0159\1\u015f\13\u0159\1\u015f\12\u0159\2\u015f\1\134"+
    "\1\u015f\4\u0159\1\u015f\5\u0159\1\u015f\1\u0159\3\u015f\4\u0159"+
    "\1\150\2\0\1\324\1\150\1\0\2\150\1\u0133\1\150"+
    "\1\0\1\150\2\0\1\u0133\5\150\1\0\6\u0133\1\150"+
    "\13\u0133\1\150\12\u0133\1\u0160\3\150\4\u0133\1\150\4\u0133"+
    "\2\150\1\u0133\3\150\4\u0133\1\150\2\0\1\324\1\150"+
    "\1\0\2\150\1\u0161\1\150\1\0\1\150\2\0\1\u0161"+
    "\5\150\1\0\6\u0161\1\150\13\u0161\1\150\12\u0161\4\150"+
    "\4\u0161\1\150\4\u0161\2\150\1\u0161\3\150\4\u0161\1\u0162"+
    "\2\u0159\1\u0163\1\u0162\1\u0159\4\u0162\1\u0159\1\u0162\2\u0159"+
    "\4\u0162\1\150\1\u0162\1\u0159\37\u0162\1\150\24\u0162\37\0"+
    "\1\u0164\14\0\1\u0164\65\0\2\u0165\105\0\2\u0166\117\0"+
    "\1\u0167\14\0\1\u0167\65\0\2\u0168\61\0\2\u0169\1\0"+
    "\4\u0169\2\0\1\354\4\u0169\1\0\11\u0169\1\0\27\u0169"+
    "\1\0\13\u0169\2\0\1\u0169\1\0\1\u0169\1\0\4\u0169"+
    "\3\0\2\u016a\1\0\4\u016a\2\0\1\u0100\4\u016a\1\0"+
    "\11\u016a\1\0\27\u016a\1\0\13\u016a\2\0\1\u016a\1\0"+
    "\1\u016a\1\0\4\u016a\2\206\1\0\31\206\1\u016b\54\206"+
    "\3\0\2\u016c\1\0\4\u016c\2\0\1\u010b\4\u016c\1\0"+
    "\11\u016c\1\0\27\u016c\1\0\13\u016c\2\0\1\u016c\1\0"+
    "\1\u016c\1\0\4\u016c\2\215\1\0\31\215\1\u016d\54\215"+
    "\41\0\1\u016e\57\0\1\u016f\206\0\1\u0170\34\0\1\u0171"+
    "\117\0\1\u0172\123\0\1\u0173\143\0\1\u0174\56\0\1\u0175"+
    "\35\0\1\u0176\143\0\1\u0177\145\0\1\u0152\34\0\1\u0154"+
    "\15\0\3\u0154\2\0\1\u0154\11\0\1\u0154\1\0\2\u0154"+
    "\11\0\1\u0154\1\0\1\u0153\3\u0154\3\0\1\u0154\17\0"+
    "\1\u0178\5\0\1\u0178\6\0\6\u0178\1\0\13\u0178\1\0"+
    "\12\u0178\4\0\4\u0178\1\0\4\u0178\2\0\1\u0178\3\0"+
    "\4\u0178\22\u0179\1\0\41\u0179\1\0\24\u0179\6\0\1\u017a"+
    "\1\0\1\u0158\5\0\1\u0158\6\0\6\u0158\1\0\13\u0158"+
    "\1\0\12\u0158\1\u017b\3\0\4\u0158\1\0\4\u0158\2\0"+
    "\1\u0158\3\0\4\u0158\22\u0159\1\u017c\41\u0159\1\u017d\24\u0159"+
    "\6\0\4\102\4\0\1\102\6\0\6\102\1\0\7\102"+
    "\1\u017e\3\102\1\0\12\102\4\0\4\102\1\0\7\102"+
    "\3\0\4\102\6\0\4\102\4\0\1\102\6\0\6\102"+
    "\1\0\6\102\1\u017f\4\102\1\0\12\102\4\0\1\102"+
    "\1\u017f\2\102\1\0\7\102\3\0\4\102\1\134\3\0"+
    "\4\134\1\u0180\5\134\1\u0180\6\134\6\u0178\1\134\13\u0178"+
    "\1\134\12\u0178\4\134\4\u0178\1\134\4\u0178\1\0\1\134"+
    "\1\u0178\3\134\4\u0178\1\u0181\3\u0179\16\u0181\1\134\2\u0181"+
    "\6\u0179\1\u0181\13\u0179\1\u0181\12\u0179\2\u0181\1\134\1\u0181"+
    "\4\u0179\1\u0181\5\u0179\1\u0181\1\u0179\3\u0181\4\u0179\1\134"+
    "\3\0\2\134\1\u0182\1\134\1\u015e\5\134\1\u015e\6\134"+
    "\6\u0158\1\134\13\u0158\1\134\12\u0158\1\u0183\3\134\4\u0158"+
    "\1\134\4\u0158\1\0\1\134\1\u0158\3\134\4\u0158\1\u015f"+
    "\3\u0159\16\u015f\1\u0184\2\u015f\6\u0159\1\u015f\13\u0159\1\u015f"+
    "\12\u0159\2\u015f\1\u0185\1\u015f\4\u0159\1\u015f\5\u0159\1\u015f"+
    "\1\u0159\3\u015f\4\u0159\1\u0186\2\u0179\1\u0187\1\u0186\1\u0179"+
    "\4\u0186\1\u0179\1\u0186\2\u0179\4\u0186\1\150\1\u0186\1\u0179"+
    "\37\u0186\1\150\24\u0186\1\150\2\0\1\324\1\150\1\0"+
    "\2\150\1\u0161\1\150\1\0\1\150\2\0\1\u0161\5\150"+
    "\1\0\6\u0161\1\150\13\u0161\1\150\12\u0161\1\u0188\3\150"+
    "\4\u0161\1\150\4\u0161\2\150\1\u0161\3\150\4\u0161\1\u0162"+
    "\2\u0159\1\u0163\1\u0162\1\u0159\4\u0162\1\u0159\1\u0162\2\u0159"+
    "\4\u0162\1\u0189\1\u0162\1\u0159\37\u0162\1\u018a\24\u0162\51\0"+
    "\1\u018b\5\0\1\u018b\75\0\1\u018c\13\0\1\u018c\71\0"+
    "\1\u018d\11\0\1\u018d\76\0\1\u018e\11\0\1\u018e\101\0"+
    "\1\u018f\13\0\1\u018f\30\0\2\206\1\0\32\206\1\u0190"+
    "\53\206\2\215\1\0\32\215\1\u0191\53\215\10\0\1\u0192"+
    "\144\0\1\u0193\30\0\1\u0194\10\0\1\u0195\46\0\1\u0196"+
    "\152\0\1\u0197\12\0\1\u0198\142\0\1\u0199\107\0\1\u019a"+
    "\144\0\1\u019b\51\0\1\u019c\60\0\1\u019d\1\0\1\u0178"+
    "\5\0\1\u0178\6\0\6\u0178\1\0\13\u0178\1\0\12\u0178"+
    "\4\0\4\u0178\1\0\4\u0178\2\0\1\u0178\2\0\1\u0157"+
    "\4\u0178\22\u0179\1\u019e\41\u0179\1\u019f\24\u0179\10\0\1\u01a0"+
    "\5\0\1\u01a0\6\0\6\u01a0\1\0\13\u01a0\1\0\12\u01a0"+
    "\4\0\4\u01a0\1\0\4\u01a0\2\0\1\u01a0\3\0\4\u01a0"+
    "\22\u01a1\1\0\41\u01a1\1\0\24\u01a1\6\u0157\1\u01a2\7\u0157"+
    "\1\0\6\u0157\6\0\1\u0157\13\0\1\u0157\12\0\4\u0157"+
    "\4\0\1\u0157\4\0\2\u0157\1\0\3\u0157\4\0\22\u01a3"+
    "\1\0\41\u01a3\1\u017d\24\u01a3\6\0\4\102\4\0\1\102"+
    "\6\0\6\102\1\0\13\102\1\0\4\102\1\u01a4\5\102"+
    "\4\0\4\102\1\0\7\102\3\0\4\102\6\0\4\102"+
    "\4\0\1\102\6\0\6\102\1\0\3\102\1\u01a5\7\102"+
    "\1\0\4\102\1\u01a5\5\102\4\0\4\102\1\0\7\102"+
    "\3\0\4\102\1\134\3\0\2\134\1\u01a6\1\134\1\u0180"+
    "\5\134\1\u0180\6\134\6\u0178\1\134\13\u0178\1\134\12\u0178"+
    "\4\134\4\u0178\1\134\4\u0178\1\0\1\134\1\u0178\3\134"+
    "\4\u0178\1\u0181\3\u0179\16\u0181\1\u01a7\2\u0181\6\u0179\1\u0181"+
    "\13\u0179\1\u0181\12\u0179\2\u0181\1\u01a8\1\u0181\4\u0179\1\u0181"+
    "\5\u0179\1\u0181\1\u0179\3\u0181\4\u0179\1\134\3\0\4\134"+
    "\1\u0182\5\134\1\u0182\6\134\6\u01a0\1\134\13\u01a0\1\134"+
    "\12\u01a0\4\134\4\u01a0\1\134\4\u01a0\1\0\1\134\1\u01a0"+
    "\3\134\4\u01a0\1\u01a9\3\u01a1\16\u01a9\1\134\2\u01a9\6\u01a1"+
    "\1\u01a9\13\u01a1\1\u01a9\12\u01a1\2\u01a9\1\134\1\u01a9\4\u01a1"+
    "\1\u01a9\5\u01a1\1\u01a9\1\u01a1\3\u01a9\4\u01a1\1\134\3\u0157"+
    "\2\134\1\u01aa\16\134\6\0\1\134\13\0\1\134\12\0"+
    "\4\134\4\0\1\134\4\0\1\u0157\1\134\1\0\3\134"+
    "\4\0\1\u01ab\3\u01a3\16\u01ab\1\134\2\u01ab\6\u01a3\1\u01ab"+
    "\13\u01a3\1\u01ab\12\u01a3\2\u01ab\1\u0185\1\u01ab\4\u01a3\1\u01ab"+
    "\5\u01a3\1\u01ab\1\u01a3\3\u01ab\4\u01a3\1\u0186\2\u0179\1\u0187"+
    "\1\u0186\1\u0179\4\u0186\1\u0179\1\u0186\2\u0179\4\u0186\1\150"+
    "\1\u0186\1\u0179\37\u0186\1\u01ac\24\u0186\1\u01ad\2\u01a1\1\u01ae"+
    "\1\u01ad\1\u01a1\4\u01ad\1\u01a1\1\u01ad\2\u01a1\4\u01ad\1\150"+
    "\1\u01ad\1\u01a1\37\u01ad\1\150\24\u01ad\1\150\2\u0157\1\u01af"+
    "\1\150\1\u0157\1\u01b0\3\150\1\u0157\1\150\2\u0157\6\150"+
    "\1\u0157\64\150\1\u01b1\2\u01a3\1\u01b2\1\u01b1\1\u01a3\4\u01b1"+
    "\1\u01a3\1\u01b1\2\u01a3\4\u01b1\1\150\1\u01b1\1\u01a3\37\u01b1"+
    "\1\u018a\24\u01b1\52\0\1\u01b3\101\0\1\u01b4\22\0\1\u01b4"+
    "\70\0\1\u01b5\12\0\1\u01b5\56\0\2\u01b6\114\0\1\u01b7"+
    "\40\0\1\u01b7\13\0\2\206\1\0\33\206\1\u01b8\52\206"+
    "\2\215\1\0\33\215\1\u01b9\52\215\44\0\1\u01ba\145\0"+
    "\1\u01bb\54\0\1\u01bc\7\0\1\u01bd\101\0\1\u01be\104\0"+
    "\1\u01bf\124\0\1\u01c0\106\0\1\u01c1\101\0\1\u01c2\121\0"+
    "\1\u01c3\14\0\1\u01c4\124\0\1\u01c5\40\0\1\u01c6\61\0"+
    "\1\u01c7\5\0\1\u01c7\6\0\6\u01c7\1\0\13\u01c7\1\0"+
    "\12\u01c7\4\0\4\u01c7\1\0\4\u01c7\2\0\1\u01c7\3\0"+
    "\4\u01c7\6\0\1\u0155\75\0\1\u0157\4\0\22\u01c8\1\0"+
    "\41\u01c8\1\u019f\24\u01c8\22\u01a1\1\u01c9\41\u01a1\1\u01ca\24\u01a1"+
    "\10\0\1\u01cb\5\0\1\u01cb\6\0\6\u01cb\1\0\13\u01cb"+
    "\1\0\12\u01cb\4\0\4\u01cb\1\0\4\u01cb\2\0\1\u01cb"+
    "\3\0\4\u01cb\22\u01a3\1\u017c\41\u01a3\1\0\24\u01a3\6\0"+
    "\4\102\4\0\1\102\6\0\6\102\1\0\13\102\1\0"+
    "\7\102\1\u01cc\2\102\4\0\4\102\1\0\7\102\3\0"+
    "\4\102\5\0\1\u01cd\4\102\3\0\1\u01cd\1\102\5\0"+
    "\1\u01cd\6\102\1\0\13\102\1\0\12\102\4\0\4\102"+
    "\1\0\7\102\3\0\4\102\1\134\3\0\4\134\1\u01a6"+
    "\5\134\1\u01a6\6\134\6\u01c7\1\134\13\u01c7\1\134\12\u01c7"+
    "\4\134\4\u01c7\1\134\4\u01c7\1\0\1\134\1\u01c7\3\134"+
    "\4\u01c7\1\134\3\0\2\134\1\u015c\16\134\6\0\1\134"+
    "\13\0\1\134\12\0\4\134\4\0\1\134\5\0\1\134"+
    "\1\0\3\134\4\0\1\u01ce\3\u01c8\16\u01ce\1\134\2\u01ce"+
    "\6\u01c8\1\u01ce\13\u01c8\1\u01ce\12\u01c8\2\u01ce\1\u01a8\1\u01ce"+
    "\4\u01c8\1\u01ce\5\u01c8\1\u01ce\1\u01c8\3\u01ce\4\u01c8\1\u01a9"+
    "\3\u01a1\16\u01a9\1\u01cf\2\u01a9\6\u01a1\1\u01a9\13\u01a1\1\u01a9"+
    "\12\u01a1\2\u01a9\1\u01d0\1\u01a9\4\u01a1\1\u01a9\5\u01a1\1\u01a9"+
    "\1\u01a1\3\u01a9\4\u01a1\1\134\3\0\4\134\1\u01d1\5\134"+
    "\1\u01d1\6\134\6\u01cb\1\134\13\u01cb\1\134\12\u01cb\4\134"+
    "\4\u01cb\1\134\4\u01cb\1\0\1\134\1\u01cb\3\134\4\u01cb"+
    "\1\u01ab\3\u01a3\16\u01ab\1\u0184\2\u01ab\6\u01a3\1\u01ab\13\u01a3"+
    "\1\u01ab\12\u01a3\2\u01ab\1\134\1\u01ab\4\u01a3\1\u01ab\5\u01a3"+
    "\1\u01ab\1\u01a3\3\u01ab\4\u01a3\1\u01d2\2\u01c8\1\u01d3\1\u01d2"+
    "\1\u01c8\4\u01d2\1\u01c8\1\u01d2\2\u01c8\4\u01d2\1\150\1\u01d2"+
    "\1\u01c8\37\u01d2\1\u01ac\24\u01d2\1\u01ad\2\u01a1\1\u01ae\1\u01ad"+
    "\1\u01a1\4\u01ad\1\u01a1\1\u01ad\2\u01a1\4\u01ad\1\u01d4\1\u01ad"+
    "\1\u01a1\37\u01ad\1\u01d5\24\u01ad\1\150\2\0\1\324\1\150"+
    "\1\0\2\150\1\u01d6\1\150\1\0\1\150\2\0\1\u01d6"+
    "\5\150\1\0\6\u01d6\1\150\13\u01d6\1\150\12\u01d6\4\150"+
    "\4\u01d6\1\150\4\u01d6\2\150\1\u01d6\3\150\4\u01d6\1\u01b1"+
    "\2\u01a3\1\u01b2\1\u01b1\1\u01a3\4\u01b1\1\u01a3\1\u01b1\2\u01a3"+
    "\4\u01b1\1\u0189\1\u01b1\1\u01a3\37\u01b1\1\150\24\u01b1\41\0"+
    "\1\u01d7\11\0\1\u01d7\74\0\1\u01d8\14\0\1\u01d8\73\0"+
    "\1\u01d9\14\0\1\u01d9\34\0\2\206\1\0\34\206\1\u01da"+
    "\51\206\2\215\1\0\34\215\1\u01db\51\215\101\0\1\u0112"+
    "\55\0\1\u01dc\137\0\1\u01dd\110\0\1\u01de\54\0\1\u01df"+
    "\110\0\1\u01e0\124\0\1\u01e1\65\0\1\u01e2\110\0\1\u01e3"+
    "\117\0\1\u01e4\105\0\1\u01e5\62\0\1\u01c7\5\0\1\u01c7"+
    "\6\0\6\u01c7\1\0\13\u01c7\1\0\12\u01c7\4\0\4\u01c7"+
    "\1\0\4\u01c7\2\0\1\u01c7\2\0\1\u0157\4\u01c7\22\u01c8"+
    "\1\u019e\41\u01c8\1\0\24\u01c8\16\u0157\1\0\6\u0157\6\0"+
    "\1\u0157\13\0\1\u0157\12\0\4\u0157\4\0\1\u0157\4\0"+
    "\2\u0157\1\0\3\u0157\4\0\22\u01e6\1\0\41\u01e6\1\u01ca"+
    "\24\u01e6\6\u0157\1\u01e7\1\u0157\1\u01e8\5\u0157\1\u01cb\6\u0157"+
    "\6\u01cb\1\u0157\13\u01cb\1\u0157\12\u01cb\4\u0157\4\u01cb\1\u0157"+
    "\4\u01cb\2\u0157\1\u01cb\3\u0157\4\u01cb\6\0\4\102\4\0"+
    "\1\102\6\0\5\102\1\u01e9\1\0\13\102\1\0\12\102"+
    "\4\0\4\102\1\0\7\102\3\0\4\102\5\0\1\u01cd"+
    "\7\0\1\u01cd\6\0\1\u01cd\64\0\1\u01ce\3\u01c8\16\u01ce"+
    "\1\u01a7\2\u01ce\6\u01c8\1\u01ce\13\u01c8\1\u01ce\12\u01c8\2\u01ce"+
    "\1\134\1\u01ce\4\u01c8\1\u01ce\5\u01c8\1\u01ce\1\u01c8\3\u01ce"+
    "\4\u01c8\1\134\3\u0157\21\134\6\0\1\134\13\0\1\134"+
    "\12\0\4\134\4\0\1\134\4\0\1\u0157\1\134\1\0"+
    "\3\134\4\0\1\u01ea\3\u01e6\16\u01ea\1\134\2\u01ea\6\u01e6"+
    "\1\u01ea\13\u01e6\1\u01ea\12\u01e6\2\u01ea\1\u01d0\1\u01ea\4\u01e6"+
    "\1\u01ea\5\u01e6\1\u01ea\1\u01e6\3\u01ea\4\u01e6\1\134\3\u0157"+
    "\2\134\1\u01eb\1\134\1\u01d1\5\134\1\u01d1\6\134\6\u01cb"+
    "\1\134\13\u01cb\1\134\12\u01cb\4\134\4\u01cb\1\134\4\u01cb"+
    "\1\u0157\1\134\1\u01cb\3\134\4\u01cb\1\u01d2\2\u01c8\1\u01d3"+
    "\1\u01d2\1\u01c8\4\u01d2\1\u01c8\1\u01d2\2\u01c8\4\u01d2\1\150"+
    "\1\u01d2\1\u01c8\37\u01d2\1\150\24\u01d2\1\150\2\u0157\1\u01af"+
    "\1\150\1\u0157\4\150\1\u0157\1\150\2\u0157\6\150\1\u0157"+
    "\64\150\1\u01ec\2\u01e6\1\u01ed\1\u01ec\1\u01e6\4\u01ec\1\u01e6"+
    "\1\u01ec\2\u01e6\4\u01ec\1\150\1\u01ec\1\u01e6\37\u01ec\1\u01d5"+
    "\24\u01ec\1\150\2\u0157\1\u01af\1\150\1\u0157\1\u01ee\1\150"+
    "\1\u01d6\1\150\1\u0157\1\150\2\u0157\1\u01d6\5\150\1\u0157"+
    "\6\u01d6\1\150\13\u01d6\1\150\12\u01d6\4\150\4\u01d6\1\150"+
    "\4\u01d6\2\150\1\u01d6\3\150\4\u01d6\2\206\1\0\33\206"+
    "\1\u01ef\52\206\2\215\1\0\33\215\1\u01f0\52\215\54\0"+
    "\1\u01f1\143\0\1\u01f2\56\0\1\u01f3\131\0\1\u01f4\57\0"+
    "\1\u01f5\121\0\1\u01f6\65\0\1\u01f7\55\0\22\u01e6\1\u01c9"+
    "\41\u01e6\1\0\24\u01e6\10\0\1\u01f8\5\0\1\u01f8\6\0"+
    "\6\u01f8\1\0\13\u01f8\1\0\12\u01f8\4\0\4\u01f8\1\0"+
    "\4\u01f8\2\0\1\u01f8\3\0\4\u01f8\6\0\4\102\4\0"+
    "\1\102\6\0\6\102\1\0\5\102\1\u01f9\5\102\1\0"+
    "\12\102\4\0\4\102\1\0\7\102\3\0\4\102\1\u01ea"+
    "\3\u01e6\16\u01ea\1\u01cf\2\u01ea\6\u01e6\1\u01ea\13\u01e6\1\u01ea"+
    "\12\u01e6\2\u01ea\1\134\1\u01ea\4\u01e6\1\u01ea\5\u01e6\1\u01ea"+
    "\1\u01e6\3\u01ea\4\u01e6\1\134\3\0\4\134\1\u01fa\5\134"+
    "\1\u01fa\6\134\6\u01f8\1\134\13\u01f8\1\134\12\u01f8\4\134"+
    "\4\u01f8\1\134\4\u01f8\1\0\1\134\1\u01f8\3\134\4\u01f8"+
    "\1\u01ec\2\u01e6\1\u01ed\1\u01ec\1\u01e6\4\u01ec\1\u01e6\1\u01ec"+
    "\2\u01e6\4\u01ec\1\u01d4\1\u01ec\1\u01e6\37\u01ec\1\150\24\u01ec"+
    "\1\150\2\0\1\324\1\150\1\0\2\150\1\u01fb\1\150"+
    "\1\0\1\150\2\0\1\u01fb\5\150\1\0\6\u01fb\1\150"+
    "\13\u01fb\1\150\12\u01fb\4\150\4\u01fb\1\150\4\u01fb\2\150"+
    "\1\u01fb\3\150\4\u01fb\2\206\1\0\30\206\1\u01fc\55\206"+
    "\2\215\1\0\30\215\1\u01fd\55\215\42\0\1\u01fe\107\0"+
    "\1\u01ff\144\0\1\u0200\110\0\1\u0201\13\0\10\u0157\1\u0202"+
    "\5\u0157\1\u01f8\6\u0157\6\u01f8\1\u0157\13\u01f8\1\u0157\12\u01f8"+
    "\4\u0157\4\u01f8\1\u0157\4\u01f8\2\u0157\1\u01f8\3\u0157\4\u01f8"+
    "\6\0\4\102\4\0\1\102\6\0\6\102\1\0\7\102"+
    "\1\u0203\3\102\1\0\12\102\4\0\4\102\1\0\7\102"+
    "\3\0\4\102\1\134\3\u0157\4\134\1\u01fa\5\134\1\u01fa"+
    "\6\134\6\u01f8\1\134\13\u01f8\1\134\12\u01f8\4\134\4\u01f8"+
    "\1\134\4\u01f8\1\u0157\1\134\1\u01f8\3\134\4\u01f8\1\150"+
    "\2\u0157\1\u01af\1\150\1\u0157\2\150\1\u01fb\1\150\1\u0157"+
    "\1\150\2\u0157\1\u01fb\5\150\1\u0157\6\u01fb\1\150\13\u01fb"+
    "\1\150\12\u01fb\4\150\4\u01fb\1\150\4\u01fb\2\150\1\u01fb"+
    "\3\150\4\u01fb\45\0\1\u0204\121\0\1\u0205\14\0\1\u0206"+
    "\124\0\1\u0207\111\0\1\u01c3\6\0\4\102\4\0\1\102"+
    "\6\0\6\102\1\0\13\102\1\0\12\102\4\0\4\102"+
    "\1\0\7\102\3\0\2\102\1\u0208\1\102\32\0\1\u0209"+
    "\110\0\1\u020a\117\0\1\u020b\55\0\4\102\4\0\1\102"+
    "\6\0\6\102\1\0\5\102\1\u020c\5\102\1\0\12\102"+
    "\4\0\4\102\1\0\7\102\3\0\4\102\45\0\1\u020d"+
    "\121\0\1\u020e\40\0\4\102\4\0\1\102\6\0\6\102"+
    "\1\0\5\102\1\u020f\5\102\1\0\12\102\4\0\4\102"+
    "\1\0\7\102\3\0\4\102\75\0\1\u0210\21\0\4\102"+
    "\4\0\1\102\6\0\6\102\1\0\13\102\1\0\4\102"+
    "\1\u0211\5\102\4\0\4\102\1\0\7\102\3\0\4\102"+
    "\110\0\1\u0205";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, 
     1,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  9,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  9, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1, 
     9,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1,  9,  9,  1,  1, 
     0,  1,  0,  9,  1,  1,  0,  1,  0,  0,  0,  9,  1,  1,  1,  9, 
     9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     9,  1,  1,  0,  0,  0,  9,  0,  0,  1,  1,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  0,  1,  0, 
     0,  0,  9,  0,  0,  0,  1,  0,  0,  0,  9,  1,  0,  0,  1,  1, 
     0,  1,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  0,  0,  0, 
     1,  1,  1,  9,  0,  0,  9,  0,  0,  0,  9,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0, 
     1,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     0,  1,  9,  0,  0,  0,  9,  1,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  0,  0,  0,  0,  1, 
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  0,  0,  0,  0,  9,  9,  1,  1,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1, 
     1,  1,  0,  1,  1,  1,  9,  9,  9,  1,  1,  0,  0,  0,  9,  9, 
     0,  9,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1, 
     0,  0,  0,  9,  0,  9,  9,  0,  1,  1,  1,  1,  1,  0,  0,  0, 
     0,  1,  1,  0,  9,  0,  0,  1,  9,  0,  0,  1,  0,  9,  1,  0,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  // private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    public static boolean debugTokenizer = false;
    
	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	private String f_context = null;

	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();

	private String context = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	private XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public final boolean isCaseSensitiveBlocking() {
	return fIsCaseSensitiveBlocking;
}
/* user method */
public final void setCaseSensitiveBlocking(boolean newValue) {
	fIsCaseSensitiveBlocking = newValue;
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	XML_END_TAG_OPEN: 41-42
 *	XML_TAG_NAME: 43-48
 *	XML_TAG_CLOSE: 49-49
 *	XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && yy_currentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			same = true;
			// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
			// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			
			// safety check for array accesses (yy_currentPos is the *last* character we can check against)
			if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
				for(i = 0; i < searchStringLength; i++) {
					if(same && fIsCaseSensitiveBlocking)
						same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
					else if(same && !fIsCaseSensitiveBlocking)
						same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
				}
			}
			// safety check failed; no match is possible right now
			else {
				same = false;
			}
			if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = yy_buffer[yy_currentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		yy_markedPos = yy_currentPos - searchStringLength;
		yy_currentPos = yy_markedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (yy_markedPos == yy_startRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		yy_markedPos = yy_currentPos;
		yy_currentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(yy_markedPos == yy_startRead)
		return primGetNextToken();
	return searchContext;
}
/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}
/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		context = fBufferedContext;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == XML_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = yytext();
			else
				fCurrentTagName = null;
		}
		else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (yy_atEOF) {
			fTokenCount++;
			return null;
		}
	}
	// store the next token
	f_context = primGetNextToken();
	if (f_context == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	}
	else if (f_context == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (f_context == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	fShouldLoadBuffered = true;
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}
	if (context == null) {
		// EOF
		if (SSTokenizer.debugTokenizer) {
			System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
		}
		return null;
	}
	fTokenCount++;
	return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
}
/* user method */
public SSTokenizer(){
	super();
}
/* user method */
public SSTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (SSTokenizer.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	yy_reader = in;

	/* the current state of the DFA */
	yy_state = 0;

	/* the current lexical state */
	yy_lexical_state = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(yy_buffer, (char)0);

	/* the textposition at the last accepting state */
	yy_markedPos = 0;

	/* the textposition at the last state to be included in yytext */
	//yy_pushbackPos = 0;

	/* the current text position in the buffer */
	yy_currentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	yy_startRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	yy_endRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	//yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* yy_atEOF == true <=> the scanner has returned a value for EOF */
	yy_atEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	yy_eof_done = false;


	/* user vars: */
	fTokenCount = 0;
 
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	start = 0;
	textLength = 0;
	length = 0;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		SSTokenizer newInstance = new SSTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanXMLCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_XML_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", false, XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}
/* user method */
private final String scanSSCommentText() throws IOException {
    // Scan for '--%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_COMMENT_END state and return the next
    //  context as usual.
    return doScan("--%>", false, SS_COMMENT_TEXT, ST_SS_COMMENT_END, ST_SS_COMMENT_END);
}
private final String scanSSConditionalText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CONDITIONAL_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CONDITIONAL_TEXT, ST_SS_CONDITIONAL_END, ST_SS_CONDITIONAL_END);
}
private final String scanSSRequirementText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_REQUIREMENT_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_REQUIREMENT_CONTENT, ST_SS_REQUIREMENT_END, ST_SS_REQUIREMENT_END);
}
private final String scanSSControlText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CONTROL_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CONTROL_CONTENT, ST_SS_CONTROL_END, ST_SS_CONTROL_END);
}
private final String scanSSIncludeText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_INCLUDE_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_INCLUDE_CONTENT, ST_SS_INCLUDE_END, ST_SS_INCLUDE_END);
}
private final String scanSSCacheBlockText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CACHEBLOCK_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CACHEBLOCK_CONTENT, ST_SS_CACHEBLOCK_END, ST_SS_CACHEBLOCK_END);
}
private final String scanSSUncacheBlockText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CACHEBLOCK_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_UNCACHED_CONTENT, ST_SS_UNCACHED_END, ST_SS_UNCACHED_END);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SSTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SSTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[28470];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 7668) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1376) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		//if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		//}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 528: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XSL processing instruction target");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 530: break;
        case 525: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end uncache block");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_UNCACHED;
 }
        case 531: break;
        case 520: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end_control");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_CONTROL;
 }
        case 532: break;
        case 516: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end cache block");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_CACHEBLOCK;
 }
        case 533: break;
        case 502: 
        case 507: 
        case 508: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 534: break;
        case 501: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncached Start");//$NON-NLS-1$
    yybegin(ST_SS_CACHEBLOCK_CONTENT);
    return SS_UNCACHED_OPEN;
 }
        case 535: break;
        case 499: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe base_tag");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_BASE_TAG;
 }
        case 536: break;
        case 481: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control Start");//$NON-NLS-1$
    yybegin(ST_SS_CONTROL_CONTENT);
    return SS_CONTROL_OPEN;
 }
        case 537: break;
        case 479: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include Start");//$NON-NLS-1$
    yybegin(ST_SS_INCLUDE_CONTENT);
    return SS_INCLUDE_OPEN;
 }
        case 538: break;
        case 478: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement Start");//$NON-NLS-1$
    yybegin(ST_SS_REQUIREMENT_CONTENT);
    return SS_REQUIREMENT_OPEN;
 }
        case 539: break;
        case 472: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 540: break;
        case 471: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 541: break;
        case 470: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 542: break;
        case 450: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block Start");//$NON-NLS-1$
    yybegin(ST_SS_CACHEBLOCK_CONTENT);
    return SS_CACHEBLOCK_OPEN;
 }
        case 543: break;
        case 442: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end_if");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_IF;
 }
        case 544: break;
        case 438: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 545: break;
        case 437: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 546: break;
        case 142: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (SSTokenizer.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 547: break;
        case 136: 
        case 138: 
        case 139: 
        case 261: 
        case 262: 
        case 265: 
        case 266: 
        case 322: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 548: break;
        case 135: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (SSTokenizer.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 549: break;
        case 129: 
        case 131: 
        case 132: 
        case 250: 
        case 251: 
        case 254: 
        case 255: 
        case 318: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 550: break;
        case 124: 
        case 126: 
        case 127: 
        case 128: 
        case 242: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 551: break;
        case 119: 
        case 121: 
        case 122: 
        case 123: 
        case 230: 
        case 231: 
        case 234: 
        case 235: 
        case 315: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 552: break;
        case 116: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 553: break;
        case 111: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (SSTokenizer.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 554: break;
        case 103: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 214: 
        case 217: 
        case 218: 
        case 306: 
        case 307: 
        case 308: 
        case 351: 
        case 352: 
        case 353: 
        case 389: 
        case 391: 
        case 392: 
        case 393: 
        case 427: 
        case 428: 
        case 431: 
        case 432: 
        case 465: 
        case 467: 
        case 468: 
        case 469: 
        case 491: 
        case 493: 
        case 506: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attr value");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 555: break;
        case 102: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("equals");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 556: break;
        case 100: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attr name");//$NON-NLS-1$
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 557: break;
        case 95: 
        case 97: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 558: break;
        case 93: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("tag close");//$NON-NLS-1$
	if(isBlockMarker()) {
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);
        return XML_TAG_CLOSE;
 }
        case 559: break;
        case 87: 
        case 89: 
        case 90: 
        case 205: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction attribute value");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 560: break;
        case 86: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction '='");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 561: break;
        case 84: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 562: break;
        case 82: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 563: break;
        case 49: 
        case 181: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("non-reference %");//$NON-NLS-1$
	return XML_CONTENT;
 }
        case 564: break;
        case 48: 
        case 50: 
        case 51: 
        case 52: 
        case 57: 
        case 58: 
        case 62: 
        case 63: 
        case 73: 
        case 77: 
        case 81: 
        case 83: 
        case 85: 
        case 88: 
        case 94: 
        case 101: 
        case 104: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 117: 
        case 118: 
        case 120: 
        case 125: 
        case 130: 
        case 137: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 153: 
        case 156: 
        case 159: 
        case 162: 
        case 165: 
        case 168: 
        case 171: 
          { 
	if (SSTokenizer.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 565: break;
        case 47: 
        case 92: 
        case 110: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
        yybegin(ST_XML_TAG_NAME);
        return XML_TAG_OPEN;
 }
        case 566: break;
        case 29: 
        case 140: 
        case 141: 
        case 268: 
        case 324: 
        case 364: 
        case 400: 
        case 440: 
        case 474: 
        case 495: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 567: break;
        case 27: 
        case 133: 
        case 134: 
        case 257: 
        case 320: 
        case 362: 
        case 399: 
        case 439: 
        case 473: 
        case 494: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 568: break;
        case 16: 
        case 91: 
        case 96: 
        case 98: 
        case 99: 
        case 209: 
        case 210: 
        case 303: 
        case 304: 
        case 305: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 489: 
        case 490: 
        case 505: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("inappropriate tag name");//$NON-NLS-1$
	yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 569: break;
        case 5: 
        case 8: 
        case 9: 
        case 10: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 28: 
        case 64: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 570: break;
        case 0: 
        case 46: 
        case 177: 
        case 180: 
        case 288: 
        case 289: 
        case 290: 
        case 337: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nXML content");//$NON-NLS-1$
	return XML_CONTENT;
 }
        case 571: break;
        case 53: 
        case 54: 
        case 55: 
        case 56: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
	if(blockContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return blockContext;
 }
        case 572: break;
        case 59: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 573: break;
        case 60: 
        case 61: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 574: break;
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 188: 
        case 189: 
        case 190: 
        case 302: 
        case 345: 
        case 346: 
        case 381: 
        case 382: 
        case 419: 
        case 459: 
        case 488: 
        case 504: 
        case 514: 
        case 519: 
        case 523: 
        case 526: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 575: break;
        case 69: 
          { 
        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 576: break;
        case 70: 
        case 71: 
        case 72: 
          { 
	// block scan until close is found
	return doScan("?>", false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 577: break;
        case 74: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 578: break;
        case 75: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 579: break;
        case 76: 
        case 78: 
        case 79: 
        case 80: 
        case 196: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 580: break;
        case 151: 
        case 152: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe comment content");//$NON-NLS-1$
    return scanSSCommentText();
 }
        case 581: break;
        case 154: 
        case 155: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe conditional content");//$NON-NLS-1$
    return scanSSConditionalText();
 }
        case 582: break;
        case 157: 
        case 158: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement content");//$NON-NLS-1$
    return scanSSRequirementText();
 }
        case 583: break;
        case 160: 
        case 161: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control content");//$NON-NLS-1$
    return scanSSControlText();
 }
        case 584: break;
        case 163: 
        case 164: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include content");//$NON-NLS-1$
    return scanSSIncludeText();
 }
        case 585: break;
        case 166: 
        case 167: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block content");//$NON-NLS-1$
    return scanSSCacheBlockText();
 }
        case 586: break;
        case 169: 
        case 170: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncached content");//$NON-NLS-1$
    return scanSSUncacheBlockText();
 }
        case 587: break;
        case 172: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nend tag open");//$NON-NLS-1$
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 588: break;
        case 173: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nprocessing instruction start");//$NON-NLS-1$
	yybegin(ST_PI);
        return XML_PI_OPEN;
 }
        case 589: break;
        case 174: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe start");//$NON-NLS-1$
    yybegin(ST_SS);
    return SS_OPEN;
 }
        case 590: break;
        case 175: 
          { 
	fStateStack.push(yystate());
	if(SSTokenizer.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 591: break;
        case 179: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end");//$NON-NLS-1$
    //yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 592: break;
        case 183: 
        case 342: 
        case 343: 
        case 415: 
        case 417: 
        case 430: 
        case 486: 
        case 487: 
        case 513: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe Variable");//$NON-NLS-1$.
    return SS_VARIABLE;
 }
        case 593: break;
        case 187: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 594: break;
        case 191: 
          { 
		// ended with nothing inside
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 595: break;
        case 192: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 596: break;
        case 208: 
          { 
        yybegin(YYINITIAL);
	if(SSTokenizer.debugTokenizer)
		dump("empty tag close");//$NON-NLS-1$
        return XML_EMPTY_TAG_CLOSE;
 }
        case 597: break;
        case 224: 
        case 238: 
        case 246: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 598: break;
        case 273: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe conditional start");//$NON-NLS-1$
    yybegin(ST_SS_CONDITIONAL_CONTENT);
    return SS_CONDITIONAL_OPEN;
 }
        case 599: break;
        case 279: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe conditional end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 600: break;
        case 280: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 601: break;
        case 281: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 602: break;
        case 282: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 603: break;
        case 283: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 604: break;
        case 284: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncache end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 605: break;
        case 291: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 606: break;
        case 294: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 607: break;
        case 298: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 608: break;
        case 299: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 609: break;
        case 300: 
        case 301: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 610: break;
        case 334: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe comment start");//$NON-NLS-1$
    yybegin(ST_SS_COMMENT);
    return SS_COMMENT_OPEN;
 }
        case 611: break;
        case 335: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 612: break;
        case 338: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 613: break;
        case 365: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe else");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_ELSE;
 }
        case 614: break;
        case 373: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe comment end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_COMMENT_CLOSE;
 }
        case 615: break;
        case 420: 
        case 460: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction target");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 616: break;
        case 143: 
        case 144: 
          { 
		return doBlockTagScan();
	 }
        case 617: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
