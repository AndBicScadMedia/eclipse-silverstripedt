/* The following code was generated by JFlex 1.2.2 on 12/15/11 1:13 PM */

/*******************************************************************************
 * Copyright (c) 2004, 2010 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

package ca.edchipman.silverstripepdt.parser;

import ca.edchipman.silverstripepdt.regions.SilverStripeRegionContext;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.Logger;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 12/15/11 1:13 PM from the specification file
 * <tt>file:/Z:/eclipse/workspace/ca.edchipman.silverStripePDT/DevTimeSupport/SedModel/SSTokenizer/devel/SSTokenizer.jflex</tt>
 */
public class SSTokenizer implements BlockTokenizer, DOMRegionContext, SilverStripeRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_SS_UNCACHED_CONTENT = 46;
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_SS_COMMENT = 32;
  final public static int ST_BLOCK_TAG_SCAN = 30;
  final public static int ST_SS_CACHEBLOCK_CONTENT = 44;
  final public static int ST_SS_TEMPLATE_FUNCTION_CONTENT = 42;
  final public static int ST_DHTML_ATTRIBUTE_VALUE = 14;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 8;
  final public static int ST_DHTML_TAG_CLOSE = 15;
  final public static int ST_SS_TEMPLATE_FUNCTION_END = 43;
  final public static int ST_DHTML_EQUALS = 13;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  final public static int ST_XML_ATTRIBUTE_VALUE = 19;
  final public static int ST_XML_ATTRIBUTE_NAME = 17;
  final public static int ST_XML_EQUALS = 18;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 25;
  final public static int ST_XML_ELEMENT_DECLARATION = 26;
  final public static int ST_XML_DECLARATION_CLOSE = 21;
  final public static int ST_SS_UNCACHED_END = 47;
  final public static int ST_SS_INCLUDE_CONTENT = 40;
  final public static int ST_SS_CONDITIONAL_END = 35;
  final public static int ST_SS_CONTROL_CONTENT = 38;
  final public static int ST_XML_DOCTYPE_DECLARATION = 22;
  final public static int ST_CDATA_END = 2;
  final public static int ST_PI_WS = 6;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 27;
  final public static int ST_SS_REQUIREMENT_CONTENT = 36;
  final public static int ST_SS_CACHEBLOCK_END = 45;
  final public static int ST_XML_ATTLIST_DECLARATION = 28;
  final public static int ST_SS_CONTROL_END = 39;
  final public static int ST_XML_PI_EQUALS = 9;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 29;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 24;
  final public static int ST_DHTML_ATTRIBUTE_NAME = 12;
  final public static int ST_SS_CONDITIONAL_CONTENT = 34;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 23;
  final public static int ST_SS = 31;
  final public static int ST_PI_CONTENT = 7;
  final public static int ST_SS_REQUIREMENT_END = 37;
  final public static int ST_PI = 5;
  final public static int ST_SS_COMMENT_END = 33;
  final public static int ST_XML_DECLARATION = 20;
  final public static int ST_XML_TAG_NAME = 16;
  final public static int ST_XML_PI_TAG_CLOSE = 11;
  final public static int ST_SS_INCLUDE_END = 41;
  final public static int ST_XML_COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\24\2\0\1\15\22\0\1\15\1\23\1\12\1\65"+
    "\1\106\1\20\1\13\1\14\1\62\1\22\1\17\1\17\1\64\1\7"+
    "\1\6\1\3\12\16\1\11\1\72\1\1\1\47\1\2\1\4\1\17"+
    "\1\36\1\74\1\34\1\35\1\53\1\70\1\40\1\40\1\60\1\40"+
    "\1\40\1\31\1\27\1\61\1\50\1\52\1\40\1\67\1\66\1\37"+
    "\1\71\2\40\1\25\1\51\1\40\1\33\1\0\1\21\1\0\1\10"+
    "\1\0\1\55\1\73\1\75\1\56\1\41\1\101\1\76\1\112\1\44"+
    "\1\40\1\113\1\32\1\30\1\46\1\45\1\52\1\110\1\42\1\43"+
    "\1\54\1\111\1\40\1\40\1\26\1\57\1\40\1\105\1\63\1\107"+
    "\1\0\70\102\1\104\10\102\27\103\1\102\37\103\1\102\10\103\62\77"+
    "\2\0\13\77\2\0\10\77\1\0\65\77\1\0\104\77\11\0\44\77"+
    "\3\0\2\77\4\0\36\77\70\0\131\77\22\0\7\77\16\0\2\100"+
    "\56\0\106\100\32\0\2\100\44\0\1\77\1\100\3\77\1\0\1\77"+
    "\1\0\24\77\1\0\54\77\1\0\7\77\3\0\1\77\1\0\1\77"+
    "\1\0\1\77\1\0\1\77\1\0\22\77\15\0\14\77\1\0\102\77"+
    "\1\0\14\77\1\0\44\77\1\0\4\100\11\0\65\77\2\0\2\77"+
    "\2\0\2\77\3\0\34\77\2\0\10\77\2\0\2\77\67\0\46\77"+
    "\2\0\1\77\7\0\46\77\12\0\21\100\1\0\27\100\1\0\3\100"+
    "\1\0\1\100\1\0\2\100\1\0\1\100\13\0\33\77\5\0\3\77"+
    "\56\0\32\77\5\0\1\100\12\77\10\100\15\0\12\100\6\0\1\100"+
    "\107\77\2\0\5\77\1\0\17\77\1\0\4\77\1\0\1\77\17\100"+
    "\2\77\2\100\1\0\4\100\2\0\12\100\u0207\0\3\100\1\0\65\77"+
    "\2\0\1\100\1\77\20\100\3\0\4\100\3\0\12\77\2\100\2\0"+
    "\12\100\21\0\3\100\1\0\10\77\2\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\1\77\3\0\4\77\2\0\1\100\1\0\7\100\2\0"+
    "\2\100\2\0\3\100\11\0\1\100\4\0\2\77\1\0\3\77\2\100"+
    "\2\0\12\100\2\77\20\0\1\100\2\0\6\77\4\0\2\77\2\0"+
    "\26\77\1\0\7\77\1\0\2\77\1\0\2\77\1\0\2\77\2\0"+
    "\1\100\1\0\5\100\4\0\2\100\2\0\3\100\13\0\4\77\1\0"+
    "\1\77\7\0\12\100\2\100\3\77\14\0\3\100\1\0\7\77\1\0"+
    "\1\77\1\0\3\77\1\0\26\77\1\0\7\77\1\0\2\77\1\0"+
    "\5\77\2\0\1\100\1\77\10\100\1\0\3\100\1\0\3\100\22\0"+
    "\1\77\5\0\12\100\21\0\3\100\1\0\10\77\2\0\2\77\2\0"+
    "\26\77\1\0\7\77\1\0\2\77\2\0\4\77\2\0\1\100\1\77"+
    "\6\100\3\0\2\100\2\0\3\100\10\0\2\100\4\0\2\77\1\0"+
    "\3\77\4\0\12\100\22\0\2\100\1\0\6\77\3\0\3\77\1\0"+
    "\4\77\3\0\2\77\1\0\1\77\1\0\2\77\3\0\2\77\3\0"+
    "\3\77\3\0\10\77\1\0\3\77\4\0\5\100\3\0\3\100\1\0"+
    "\4\100\11\0\1\100\17\0\11\100\21\0\3\100\1\0\10\77\1\0"+
    "\3\77\1\0\27\77\1\0\12\77\1\0\5\77\4\0\7\100\1\0"+
    "\3\100\1\0\4\100\7\0\2\100\11\0\2\77\4\0\12\100\22\0"+
    "\2\100\1\0\10\77\1\0\3\77\1\0\27\77\1\0\12\77\1\0"+
    "\5\77\4\0\7\100\1\0\3\100\1\0\4\100\7\0\2\100\7\0"+
    "\1\77\1\0\2\77\4\0\12\100\22\0\2\100\1\0\10\77\1\0"+
    "\3\77\1\0\27\77\1\0\20\77\4\0\6\100\2\0\3\100\1\0"+
    "\4\100\11\0\1\100\10\0\2\77\4\0\12\100\221\0\56\77\1\0"+
    "\1\77\1\100\2\77\7\100\5\0\6\77\1\100\10\100\1\0\12\100"+
    "\47\0\2\77\1\0\1\77\2\0\2\77\1\0\1\77\2\0\1\77"+
    "\6\0\4\77\1\0\7\77\1\0\3\77\1\0\1\77\1\0\1\77"+
    "\2\0\2\77\1\0\2\77\1\0\1\77\1\100\2\77\6\100\1\0"+
    "\2\100\1\77\2\0\5\77\1\0\1\100\1\0\6\100\2\0\12\100"+
    "\76\0\2\100\6\0\12\100\13\0\1\100\1\0\1\100\1\0\1\100"+
    "\4\0\2\100\10\77\1\0\41\77\7\0\24\100\1\0\6\100\4\0"+
    "\6\100\1\0\1\100\1\0\25\100\3\0\7\100\1\0\1\100\346\0"+
    "\46\77\12\0\47\77\11\0\1\77\1\0\2\77\1\0\3\77\1\0"+
    "\1\77\1\0\2\77\1\0\5\77\51\0\1\77\1\0\1\77\1\0"+
    "\1\77\13\0\1\77\1\0\1\77\1\0\1\77\3\0\2\77\3\0"+
    "\1\77\5\0\3\77\1\0\1\77\1\0\1\77\1\0\1\77\1\0"+
    "\1\77\3\0\2\77\3\0\2\77\1\0\1\77\50\0\1\77\11\0"+
    "\1\77\2\0\1\77\2\0\2\77\7\0\2\77\1\0\1\77\1\0"+
    "\7\77\50\0\1\77\4\0\1\77\10\0\1\77\u0c06\0\234\77\4\0"+
    "\132\77\6\0\26\77\2\0\6\77\2\0\46\77\2\0\6\77\2\0"+
    "\10\77\1\0\1\77\1\0\1\77\1\0\1\77\1\0\37\77\2\0"+
    "\65\77\1\0\7\77\1\0\1\77\3\0\3\77\1\0\7\77\3\0"+
    "\4\77\2\0\6\77\4\0\15\77\5\0\3\77\1\0\7\77\323\0"+
    "\15\100\4\0\1\100\104\0\1\77\3\0\2\77\2\0\1\77\121\0"+
    "\3\77\u0e82\0\1\100\1\0\1\77\31\0\11\77\6\100\1\0\5\100"+
    "\13\0\124\77\4\0\2\100\2\0\2\100\2\0\132\77\1\0\3\100"+
    "\6\0\50\77\u1cd3\0\u51a6\77\u0c5a\0\u2ba4\77\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    76,   152,   228,   304,   380,   456,   532,   608,   684, 
      760,   836,   912,   988,  1064,  1140,  1216,  1292,  1368,  1444, 
     1520,  1596,  1672,  1748,  1824,  1900,  1976,  2052,  2128,  2204, 
     2280,  2356,  2432,  2508,  2584,  2660,  2736,  2812,  2888,  2964, 
     3040,  3116,  3192,  3268,  3344,  3420,  3496,  3572,  3648,  3724, 
     3800,  3876,  3952,  4028,  4104,  3952,  4180,  4028,  4104,  4180, 
     4256,  3952,  3952,  4180,  4332,  4408,  4484,  4560,  4636,  4712, 
     4788,  4864,  3952,  4180,  4940,  5016,  5092,  3952,  5168,  5168, 
     5244,  5320,  5396,  4940,  3952,  5472,  5548,  5624,  3952,  5700, 
     5776,  5852,  5928,  6004,  6080,  3952,  6156,  6232,  6308,  6384, 
     6460,  6536,  6612,  6688,  3952,  6764,  6840,  6916,  6992,  7068, 
     7144,  7220,  7296,  3952,  7372,  7448,  7524,  7600,  7676,  7752, 
     7828,  7904,  7904,  7980,  8056,  8132,  8208,  8208,  8284,  8360, 
     8436,  8512,  8512,  8588,  8664,  8740,  8816,  3952,  8892,  8892, 
     8968,  9044,  9120,  9196,  3952,  3952,  4180,  9272,  9348,  9424, 
     9500,  9576,  9652,  9728,  9804,  3952,  4180,  9880,  3952,  4180, 
     9956,  3952,  4180, 10032,  3952,  4180, 10108,  3952,  4180, 10184, 
     3952,  4180, 10260,  3952,  4180, 10336,  3952,  4180, 10412,  3952, 
     3952, 10488, 10564, 10640, 10716, 10792,  3952, 10868, 10944, 11020, 
    11096, 11172, 11248, 11324,  3952, 11400, 11476, 11552,  3952,  3952, 
     5168, 11628,  5320,  3952, 11704,  5396,  5472, 10488,  5700,  5776, 
    11780,  5852,  3952, 11856,  5928,  3952, 11932, 12008,  6764, 12084, 
     6916,  3952, 12160,  6992, 12236, 12312, 10564, 12388, 12464, 12540, 
     7600,  3952, 12616, 12692,  7904, 12768,  7980,  3952, 12844, 12920, 
    12996, 12996, 13072, 13148,  8132,  7904,  8208, 13224,  8284,  3952, 
    13300,  8360,  8436,  8208,  8512, 13376,  8588,  3952, 13452, 13528, 
    13604, 13604, 13680, 13756, 13832,  8892, 13908,  8968,  3952, 13984, 
    14060, 14136, 14136, 14212, 14288, 14364,  9272,  3952,  3952, 14440, 
    14516, 14592, 14668,  9272, 14744, 14820, 14896, 14972, 15048,  3952, 
     3952,  3952,  3952,  3952,  3952,  3952, 15124, 15200, 15276, 15352, 
    15428, 15504,  3952, 15580, 15656,  3952, 15732, 15808, 15884,  3952, 
     3952,  4560, 15960, 16036, 16112, 16188, 16264, 16340, 16416, 16492, 
    16568, 16644, 16720, 16796, 16872, 12844, 16948, 16948, 13452, 17024, 
    17024, 17100, 13984, 17176, 17176, 17252, 17328, 17404, 17480, 17556, 
    17632, 17708, 17784, 17860, 17936,  3952,  3952, 18012, 18088,  3952, 
    18164, 18240, 18316,  3952, 18392, 18468, 18544, 18620, 18696, 18772, 
    18848, 18924, 19000, 19076, 19152, 19152, 19228, 19304, 19380, 19456, 
    19532, 13072, 13680, 19608, 14212, 19684, 19760, 19836, 19912, 19988, 
    20064, 20140, 20216, 20292,  3952, 20368, 20444, 20520, 20596, 20672, 
    20748, 20824, 20900, 20976, 21052, 21128, 21204, 21280, 21356, 21432, 
    21508, 21508, 21584, 21660, 21736, 21812, 21888, 21964, 22040, 22116, 
    22192, 22268, 22344, 22420, 22496, 22572, 22648, 22724, 22800, 22876, 
    22952, 23028, 23104, 23180, 23256, 23332, 20596, 23408, 23484, 23560, 
    23636, 23712, 23788, 23864, 23940, 24016, 24092, 24168, 24244, 24320, 
    24320,  6764, 24396, 24472, 24472, 24548, 24624, 24700,  3952,  3952, 
    24776, 24852, 24928,  9272, 25004, 25080, 25156, 25232, 25308, 25384, 
    25460,  9272, 25536, 25612, 25688, 25764, 25840, 25916, 25992, 26068, 
    26144, 26220, 26296, 26372, 26448, 26524, 26600, 26600, 26676, 26752, 
    26828,  3952,  3952,  3952, 26904, 26980, 27056, 27132, 27208,  9272, 
     9272, 27284,  9272, 27360, 27436, 27512, 27588, 27664, 26068, 27740, 
    27816, 27892, 27968, 27968, 28044, 28120, 28196, 28272, 28348, 28424, 
     9272, 28500,  9272,  3952, 28576, 28652, 28728, 28804,  8740,  9120, 
    28880, 28956, 29032, 29108, 28576, 29184, 29260,  9272, 29336, 29412, 
    29488,  9272, 29564, 29640, 29716, 29792,  9272, 29868, 29944,  4560
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\61\1\62\11\61\1\63\4\61\1\64\42\61\1\65"+
    "\21\61\1\66\1\67\5\61\1\70\1\71\103\70\1\72"+
    "\1\73\5\70\1\65\1\74\17\65\1\75\2\65\1\76"+
    "\67\65\1\77\1\100\112\77\1\65\1\74\5\65\1\101"+
    "\14\65\1\76\70\65\1\74\2\65\1\102\1\103\2\65"+
    "\2\104\3\65\1\103\6\65\1\103\1\105\1\106\4\104"+
    "\1\65\10\104\1\107\2\104\1\65\10\104\1\107\1\104"+
    "\4\65\4\104\1\65\5\104\1\65\1\104\1\65\1\104"+
    "\4\65\4\104\1\65\1\74\2\65\1\102\1\110\7\65"+
    "\1\110\6\65\1\110\67\65\1\111\1\112\2\111\1\113"+
    "\17\111\1\76\67\111\1\65\1\74\2\65\1\114\1\103"+
    "\2\65\2\115\3\65\1\103\6\65\1\103\6\115\1\65"+
    "\13\115\1\65\12\115\4\65\4\115\1\65\5\115\1\65"+
    "\1\115\1\65\1\115\4\65\4\115\1\65\1\74\2\65"+
    "\1\114\1\103\2\65\2\115\3\65\1\103\6\65\1\103"+
    "\6\115\1\65\13\115\1\116\12\115\4\65\4\115\1\65"+
    "\5\115\1\65\1\115\1\65\1\115\4\65\4\115\1\117"+
    "\1\74\1\65\1\120\1\121\1\103\4\117\1\122\1\117"+
    "\1\123\1\103\6\117\1\103\67\117\1\65\1\74\2\65"+
    "\1\124\17\65\1\76\70\65\1\74\1\125\1\126\1\65"+
    "\1\103\2\65\2\127\3\65\1\103\6\65\1\103\6\127"+
    "\1\65\13\127\1\65\12\127\4\65\4\127\1\65\5\127"+
    "\1\65\1\127\1\65\1\127\4\65\4\127\1\65\1\130"+
    "\1\125\1\126\1\65\1\103\2\65\2\127\3\65\1\103"+
    "\6\65\1\103\6\127\1\65\13\127\1\131\12\127\4\65"+
    "\4\127\1\65\5\127\1\65\1\127\1\65\1\127\4\65"+
    "\4\127\1\132\1\130\1\125\1\133\1\132\1\103\4\132"+
    "\1\134\1\132\1\135\1\103\6\132\1\103\67\132\1\65"+
    "\1\74\3\65\1\103\7\65\1\103\6\65\1\103\67\65"+
    "\1\136\1\137\1\140\1\141\4\136\2\142\6\136\1\143"+
    "\4\136\6\144\1\136\13\144\1\136\12\144\4\136\4\144"+
    "\1\136\5\144\1\136\1\144\1\136\1\144\1\136\1\145"+
    "\1\146\1\136\4\144\1\65\1\137\1\140\1\141\1\65"+
    "\1\103\2\65\2\147\3\65\1\103\2\65\1\150\3\65"+
    "\1\103\6\147\1\65\13\147\1\65\12\147\4\65\4\147"+
    "\1\65\5\147\1\65\1\147\1\65\1\147\1\65\1\66"+
    "\1\67\1\65\4\147\1\65\1\137\1\140\1\141\1\65"+
    "\1\103\2\65\2\147\3\65\1\103\2\65\1\150\3\65"+
    "\1\103\6\147\1\65\13\147\1\151\12\147\4\65\4\147"+
    "\1\65\5\147\1\65\1\147\1\65\1\147\1\65\1\66"+
    "\1\67\1\65\4\147\1\152\1\137\1\140\1\153\1\152"+
    "\1\103\4\152\1\154\1\152\1\155\1\103\2\152\1\156"+
    "\3\152\1\103\60\152\1\157\1\160\5\152\1\65\1\161"+
    "\1\162\2\65\1\103\7\65\1\103\2\65\1\150\3\65"+
    "\1\103\10\65\1\163\1\164\2\65\1\165\11\65\1\165"+
    "\1\65\1\164\1\163\26\65\1\66\1\67\6\65\1\74"+
    "\1\162\2\65\1\103\7\65\1\103\6\65\1\103\6\65"+
    "\1\166\61\65\1\74\1\162\2\65\1\103\2\65\2\167"+
    "\3\65\1\103\6\65\1\103\6\167\1\166\13\167\1\65"+
    "\12\167\4\65\4\167\1\65\5\167\1\65\1\167\1\65"+
    "\1\167\4\65\4\167\1\65\1\74\1\162\2\65\1\103"+
    "\7\65\1\103\6\65\1\103\6\65\1\166\7\65\1\170"+
    "\6\65\1\171\13\65\1\170\25\65\1\172\1\74\1\162"+
    "\1\173\1\172\1\103\4\172\1\174\1\172\1\175\1\103"+
    "\6\172\1\103\6\172\1\176\60\172\1\177\1\74\1\162"+
    "\1\200\1\177\1\103\4\177\1\201\1\177\1\202\1\103"+
    "\6\177\1\103\6\177\1\203\60\177\1\204\1\74\1\162"+
    "\1\205\1\204\1\103\4\204\1\206\1\204\1\207\1\103"+
    "\6\204\1\103\67\204\1\210\1\211\1\212\111\210\1\213"+
    "\1\74\1\162\1\214\1\213\1\103\4\213\1\215\1\213"+
    "\1\216\1\103\6\213\1\103\67\213\1\217\1\220\1\221"+
    "\111\217\1\222\1\223\112\222\1\65\1\74\6\65\1\224"+
    "\7\65\1\225\3\65\1\76\6\224\1\65\5\224\1\226"+
    "\1\227\1\224\1\230\2\224\1\65\12\224\4\65\4\224"+
    "\1\65\1\231\1\224\1\232\1\224\2\65\4\224\3\65"+
    "\1\224\1\233\2\224\1\234\1\235\112\234\1\65\1\74"+
    "\5\65\1\236\14\65\1\76\67\65\1\237\1\240\22\237"+
    "\1\76\67\237\1\65\1\74\16\65\1\241\3\65\1\76"+
    "\67\65\1\242\1\243\22\242\1\76\67\242\1\65\1\74"+
    "\16\65\1\244\3\65\1\76\67\65\1\245\1\246\22\245"+
    "\1\76\67\245\1\65\1\74\16\65\1\247\3\65\1\76"+
    "\67\65\1\250\1\251\22\250\1\76\67\250\1\65\1\74"+
    "\16\65\1\252\3\65\1\76\67\65\1\253\1\254\22\253"+
    "\1\76\67\253\1\65\1\74\16\65\1\255\3\65\1\76"+
    "\67\65\1\256\1\257\22\256\1\76\67\256\1\65\1\74"+
    "\16\65\1\260\3\65\1\76\67\65\1\261\1\262\22\261"+
    "\1\76\67\261\1\65\1\74\16\65\1\263\3\65\1\76"+
    "\67\65\1\61\1\0\11\61\1\0\4\61\1\0\42\61"+
    "\1\0\21\61\2\0\5\61\3\0\1\264\1\265\13\0"+
    "\1\266\2\0\1\267\75\0\1\270\2\0\2\271\3\0"+
    "\1\270\6\0\1\270\6\271\1\0\13\271\1\0\12\271"+
    "\3\0\1\272\4\271\1\0\5\271\1\0\1\271\1\0"+
    "\1\271\4\0\4\271\2\0\1\273\2\0\1\270\2\0"+
    "\2\274\3\0\1\270\2\0\1\275\3\0\1\270\6\274"+
    "\1\0\13\274\1\0\12\274\4\0\4\274\1\0\5\274"+
    "\1\0\1\274\1\0\1\274\4\0\4\274\222\0\1\276"+
    "\15\0\1\277\14\0\6\277\1\0\13\277\1\0\12\277"+
    "\4\0\4\277\1\0\4\277\2\0\1\277\6\0\4\277"+
    "\23\0\1\300\111\0\1\301\101\0\1\302\106\0\1\303"+
    "\116\0\1\103\7\0\1\103\6\0\1\103\75\0\4\104"+
    "\4\0\1\104\6\0\6\104\1\0\13\104\1\0\12\104"+
    "\4\0\4\104\1\0\7\104\1\0\2\104\3\0\4\104"+
    "\6\0\4\104\4\0\1\104\6\0\2\104\2\304\2\104"+
    "\1\0\13\104\1\0\12\104\4\0\4\104\1\0\7\104"+
    "\1\0\2\104\3\0\4\104\6\0\4\104\4\0\1\104"+
    "\6\0\2\104\1\304\1\305\2\104\1\0\13\104\1\0"+
    "\12\104\4\0\4\104\1\0\7\104\1\0\2\104\3\0"+
    "\4\104\6\0\4\104\4\0\1\104\6\0\2\104\2\306"+
    "\2\104\1\0\13\104\1\0\12\104\4\0\4\104\1\0"+
    "\7\104\1\0\2\104\3\0\4\104\5\0\1\110\7\0"+
    "\1\110\6\0\1\110\71\0\1\307\113\0\1\310\117\0"+
    "\4\115\4\0\1\115\6\0\6\115\1\0\13\115\1\0"+
    "\12\115\4\0\4\115\1\0\7\115\1\0\2\115\3\0"+
    "\4\115\1\117\2\0\1\311\1\117\1\0\4\117\1\0"+
    "\1\117\2\0\6\117\1\0\70\117\1\0\1\310\1\311"+
    "\1\117\1\0\4\117\1\0\1\117\2\0\6\117\1\0"+
    "\67\117\1\122\2\312\1\313\1\122\1\312\4\122\1\314"+
    "\1\122\2\312\6\122\1\312\67\122\1\123\2\315\1\316"+
    "\1\123\1\315\4\123\1\315\1\123\1\314\1\315\6\123"+
    "\1\315\67\123\2\0\1\125\1\317\116\0\4\127\4\0"+
    "\1\127\6\0\6\127\1\0\13\127\1\0\12\127\4\0"+
    "\4\127\1\0\7\127\1\0\2\127\3\0\4\127\20\0"+
    "\1\320\2\0\1\300\70\0\1\132\2\0\1\321\1\132"+
    "\1\0\4\132\1\0\1\132\2\0\6\132\1\0\70\132"+
    "\1\0\1\125\1\322\1\132\1\0\4\132\1\0\1\132"+
    "\2\0\6\132\1\0\67\132\1\134\2\323\1\324\1\134"+
    "\1\323\4\134\1\325\1\134\2\323\6\134\1\323\67\134"+
    "\1\135\2\326\1\327\1\135\1\326\4\135\1\326\1\135"+
    "\1\325\1\326\6\135\1\326\67\135\1\136\3\0\21\136"+
    "\6\0\1\136\13\0\1\136\12\0\4\136\4\0\1\136"+
    "\5\0\1\136\1\0\1\136\1\0\4\136\7\0\1\264"+
    "\14\0\1\266\2\0\1\267\72\0\1\330\111\0\1\136"+
    "\3\0\2\136\4\142\4\136\1\142\6\136\6\144\1\136"+
    "\13\144\1\136\12\144\4\136\4\144\1\136\5\144\1\142"+
    "\1\144\1\136\1\144\1\142\3\136\4\144\1\136\1\0"+
    "\1\273\1\0\21\136\6\0\1\136\13\0\1\136\12\0"+
    "\4\136\4\0\1\136\5\0\1\136\1\0\1\136\1\0"+
    "\4\136\12\0\4\144\4\0\1\144\6\0\6\144\1\0"+
    "\13\144\1\0\12\144\4\0\4\144\1\0\7\144\1\0"+
    "\2\144\3\0\4\144\1\136\3\0\21\136\6\0\1\136"+
    "\13\0\1\136\12\0\4\136\4\0\1\136\5\0\1\136"+
    "\1\0\1\136\1\0\2\136\1\331\1\136\4\0\1\136"+
    "\3\0\4\136\1\332\14\136\6\277\1\136\13\277\1\136"+
    "\12\277\4\136\4\277\1\136\4\277\1\0\1\136\1\277"+
    "\1\136\1\0\4\136\4\277\6\0\4\147\4\0\1\147"+
    "\6\0\6\147\1\0\13\147\1\0\12\147\4\0\4\147"+
    "\1\0\7\147\1\0\2\147\3\0\4\147\2\0\1\273"+
    "\111\0\1\152\2\0\1\333\1\152\1\0\4\152\1\0"+
    "\1\152\2\0\6\152\1\0\70\152\1\0\1\330\1\333"+
    "\1\152\1\0\4\152\1\0\1\152\2\0\6\152\1\0"+
    "\67\152\1\154\2\334\1\335\1\154\1\334\4\154\1\336"+
    "\1\154\2\334\6\154\1\334\67\154\1\155\2\337\1\340"+
    "\1\155\1\337\4\155\1\337\1\155\1\336\1\337\6\155"+
    "\1\337\67\155\1\152\1\0\1\273\1\333\1\152\1\0"+
    "\4\152\1\0\1\152\2\0\6\152\1\0\70\152\2\0"+
    "\1\333\1\152\1\0\4\152\1\0\1\152\2\0\6\152"+
    "\1\0\61\152\1\341\6\152\2\0\1\333\1\152\1\0"+
    "\2\152\1\342\1\152\1\0\1\152\2\0\6\152\1\0"+
    "\6\342\1\152\13\342\1\152\12\342\4\152\4\342\1\152"+
    "\4\342\2\152\1\342\6\152\4\342\3\0\1\264\14\0"+
    "\1\266\2\0\1\343\135\0\1\344\2\0\1\344\102\0"+
    "\1\345\14\0\1\345\70\0\2\346\61\0\21\347\1\350"+
    "\72\347\6\0\4\167\4\0\1\167\6\0\6\167\1\0"+
    "\13\167\1\0\12\167\4\0\4\167\1\0\7\167\1\0"+
    "\2\167\3\0\4\167\51\0\1\351\5\0\1\351\125\0"+
    "\1\352\17\0\1\352\2\0\1\172\2\0\1\353\1\172"+
    "\1\0\4\172\1\0\1\172\2\0\6\172\1\0\67\172"+
    "\1\174\2\354\1\355\1\174\1\354\4\174\1\356\1\174"+
    "\2\354\6\174\1\354\67\174\1\357\2\360\1\361\1\362"+
    "\1\360\4\362\1\360\1\357\1\363\1\364\3\362\1\357"+
    "\2\362\1\364\6\362\1\357\27\362\1\357\13\362\2\357"+
    "\1\362\4\357\1\362\1\357\4\362\1\176\2\347\1\365"+
    "\1\176\1\347\4\176\1\347\1\176\2\347\3\176\1\366"+
    "\2\176\1\347\67\176\1\177\2\0\1\367\1\177\1\0"+
    "\4\177\1\0\1\177\2\0\6\177\1\0\67\177\1\201"+
    "\2\370\1\371\1\201\1\370\4\201\1\372\1\201\2\370"+
    "\6\201\1\370\67\201\1\202\2\373\1\374\1\202\1\373"+
    "\4\202\1\373\1\202\1\372\1\373\6\202\1\373\67\202"+
    "\1\203\2\347\1\375\1\203\1\347\4\203\1\347\1\203"+
    "\2\347\3\203\1\376\2\203\1\347\67\203\1\204\2\0"+
    "\1\377\1\204\1\0\4\204\1\0\1\204\2\0\6\204"+
    "\1\0\67\204\1\206\2\u0100\1\u0101\1\206\1\u0100\4\206"+
    "\1\u0102\1\206\2\u0100\6\206\1\u0100\67\206\1\u0103\2\u0104"+
    "\1\u0105\1\u0106\1\u0104\4\u0106\1\u0104\1\u0103\1\u0107\1\u0108"+
    "\3\u0106\1\u0103\2\u0106\1\u0108\6\u0106\1\u0103\27\u0106\1\u0103"+
    "\13\u0106\2\u0103\1\u0106\4\u0103\1\u0106\1\u0103\4\u0106\2\210"+
    "\1\0\113\210\1\0\20\210\1\u0109\70\210\1\213\2\0"+
    "\1\u010a\1\213\1\0\4\213\1\0\1\213\2\0\6\213"+
    "\1\0\67\213\1\215\2\u010b\1\u010c\1\215\1\u010b\4\215"+
    "\1\u010d\1\215\2\u010b\6\215\1\u010b\67\215\1\u010e\2\u010f"+
    "\1\u0110\1\u0111\1\u010f\4\u0111\1\u010f\1\u010e\1\u0112\1\u0113"+
    "\3\u0111\1\u010e\2\u0111\1\u0113\6\u0111\1\u010e\27\u0111\1\u010e"+
    "\13\u0111\2\u010e\1\u0111\4\u010e\1\u0111\1\u010e\4\u0111\2\217"+
    "\1\0\113\217\1\0\20\217\1\u0114\70\217\10\0\1\u0115"+
    "\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115"+
    "\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0"+
    "\4\u0115\2\0\1\u0117\121\0\1\u0115\5\0\1\u0115\6\0"+
    "\5\u0115\1\u0118\1\0\12\u0115\1\u0119\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\5\u0115"+
    "\1\u011a\5\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0"+
    "\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\12\u0115\1\u011b\1\0\12\u0115"+
    "\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\1\u011c\3\u0115"+
    "\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\13\u0115\1\0\5\u0115\1\u011d\4\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\11\u0115\1\u011e"+
    "\1\u0115\1\0\5\u0115\1\u011f\4\u0115\1\u0116\3\0\4\u0115"+
    "\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115"+
    "\5\0\1\u0115\6\0\6\u0115\1\0\12\u0115\1\u0120\1\0"+
    "\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115"+
    "\3\0\4\u0115\7\0\1\u0121\106\0\1\u0122\113\0\1\u0123"+
    "\113\0\1\u0124\113\0\1\u0125\113\0\1\u0126\113\0\1\u0127"+
    "\113\0\1\u0128\120\0\1\u0129\113\0\1\u012a\23\0\1\u012b"+
    "\65\0\1\270\2\0\2\u012c\3\0\1\270\6\0\1\270"+
    "\6\u012c\1\0\13\u012c\1\0\12\u012c\4\0\4\u012c\1\0"+
    "\5\u012c\1\0\1\u012c\1\0\1\u012c\4\0\4\u012c\1\u012d"+
    "\1\0\3\u012d\1\u012e\4\271\1\u012d\1\0\1\u012d\1\u012e"+
    "\1\271\1\u012d\1\0\3\u012d\1\u012e\6\271\1\u012d\13\271"+
    "\1\u012d\12\271\4\u012d\4\271\1\u012f\7\271\1\u012d\2\271"+
    "\3\u012d\4\271\16\0\1\u0130\7\0\1\u0131\65\0\1\u012d"+
    "\1\0\3\u012d\1\u012e\4\274\1\u012d\1\0\1\u012d\1\u012e"+
    "\1\274\1\u012d\1\0\3\u012d\1\u012e\6\274\1\u012d\13\274"+
    "\1\u012d\12\274\4\u012d\4\274\1\u0132\7\274\1\u012d\2\274"+
    "\3\u012d\4\274\20\0\1\275\103\0\1\u0133\14\0\6\u0133"+
    "\1\0\13\u0133\1\0\12\u0133\4\0\4\u0133\1\0\4\u0133"+
    "\2\0\1\u0133\6\0\4\u0133\6\0\1\u0134\1\0\1\277"+
    "\5\0\1\277\6\0\6\277\1\0\13\277\1\0\12\277"+
    "\1\u0135\3\0\4\277\1\0\4\277\2\0\1\277\6\0"+
    "\4\277\33\0\1\u012b\62\0\1\u0136\113\0\1\u0137\117\0"+
    "\4\104\4\0\1\104\6\0\4\104\2\u0138\1\0\13\104"+
    "\1\0\12\104\4\0\4\104\1\0\7\104\1\0\2\104"+
    "\3\0\4\104\6\0\4\104\4\0\1\104\6\0\4\104"+
    "\1\u0138\1\u0139\1\0\13\104\1\0\12\104\4\0\4\104"+
    "\1\0\7\104\1\0\2\104\3\0\4\104\6\0\4\104"+
    "\4\0\1\104\6\0\6\104\1\0\13\104\1\0\2\104"+
    "\1\u013a\7\104\4\0\4\104\1\0\7\104\1\0\2\104"+
    "\3\0\4\104\12\312\1\314\101\312\14\315\1\314\77\315"+
    "\12\323\1\325\101\323\14\326\1\325\77\326\1\136\3\0"+
    "\4\136\1\u013b\14\136\6\u0133\1\136\13\u0133\1\136\12\u0133"+
    "\4\136\4\u0133\1\136\4\u0133\1\0\1\136\1\u0133\1\136"+
    "\1\0\4\136\4\u0133\1\136\3\0\2\136\1\u013c\1\136"+
    "\1\332\5\136\1\332\6\136\6\277\1\136\13\277\1\136"+
    "\12\277\1\u013d\3\136\4\277\1\136\4\277\1\0\1\136"+
    "\1\277\1\136\1\0\4\136\4\277\12\334\1\336\101\334"+
    "\14\337\1\336\77\337\1\152\2\0\1\333\1\152\1\0"+
    "\2\152\1\u013e\1\152\1\0\1\152\2\0\6\152\1\0"+
    "\6\u013e\1\152\13\u013e\1\152\12\u013e\4\152\4\u013e\1\152"+
    "\4\u013e\2\152\1\u013e\6\152\4\u013e\1\152\2\0\1\333"+
    "\1\152\1\0\1\u013f\1\152\1\342\1\152\1\0\1\152"+
    "\2\0\1\342\5\152\1\0\6\342\1\152\13\342\1\152"+
    "\12\342\1\u0140\3\152\4\342\1\152\4\342\2\152\1\342"+
    "\6\152\4\342\34\0\1\u0141\40\0\1\u0141\55\0\1\u0142"+
    "\14\0\1\u0142\100\0\1\u0143\11\0\1\u0143\103\0\1\u0144"+
    "\22\0\1\u0144\120\0\2\u0145\17\0\12\354\1\356\101\354"+
    "\1\357\2\360\1\u0146\1\357\1\360\4\357\1\360\1\357"+
    "\1\356\1\360\6\357\1\360\67\357\14\360\1\356\77\360"+
    "\1\357\2\360\1\u0146\1\357\1\360\4\357\1\360\1\357"+
    "\1\u0147\1\360\6\357\1\360\67\357\14\0\1\u0148\77\0"+
    "\14\360\1\u0147\77\360\12\370\1\372\101\370\14\373\1\372"+
    "\77\373\12\u0100\1\u0102\101\u0100\1\u0103\2\u0104\1\u0149\1\u0103"+
    "\1\u0104\4\u0103\1\u0104\1\u0103\1\u0102\1\u0104\6\u0103\1\u0104"+
    "\67\u0103\14\u0104\1\u0102\77\u0104\1\u0103\2\u0104\1\u0149\1\u0103"+
    "\1\u0104\4\u0103\1\u0104\1\u0103\1\u014a\1\u0104\6\u0103\1\u0104"+
    "\67\u0103\14\0\1\u014b\77\0\14\u0104\1\u014a\77\u0104\2\210"+
    "\1\0\30\210\1\u014c\60\210\12\u010b\1\u010d\101\u010b\1\u010e"+
    "\2\u010f\1\u014d\1\u010e\1\u010f\4\u010e\1\u010f\1\u010e\1\u010d"+
    "\1\u010f\6\u010e\1\u010f\67\u010e\14\u010f\1\u010d\77\u010f\1\u010e"+
    "\2\u010f\1\u014d\1\u010e\1\u010f\4\u010e\1\u010f\1\u010e\1\u014e"+
    "\1\u010f\6\u010e\1\u010f\67\u010e\14\0\1\u014f\77\0\14\u010f"+
    "\1\u014e\77\u010f\2\217\1\0\30\217\1\u0150\60\217\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\7\u0115\1\u0151"+
    "\3\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115"+
    "\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115"+
    "\6\0\6\u0115\1\0\13\u0115\1\0\6\u0115\1\u0152\3\u0115"+
    "\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0"+
    "\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0"+
    "\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115"+
    "\2\0\4\u0115\3\0\1\u0153\3\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\2\u0115\1\u0154\1\u0115\2\0\4\u0115"+
    "\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\7\u0115\1\u0155\3\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\12\u0115\1\u0156"+
    "\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0"+
    "\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0"+
    "\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115"+
    "\1\0\2\u0115\1\u0157\1\u0115\2\0\4\u0115\3\0\4\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115"+
    "\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\2\u0115\1\u0158"+
    "\1\u0115\2\0\4\u0115\3\0\4\u0115\20\0\1\u0159\102\0"+
    "\1\u015a\113\0\1\u015b\140\0\1\u015c\57\0\1\u012c\1\0"+
    "\11\u012c\1\0\4\u012c\1\0\73\u012c\1\u012d\1\0\11\u012d"+
    "\1\0\4\u012d\1\0\51\u012d\1\0\22\u012d\1\0\3\u012d"+
    "\1\u012e\5\u012d\1\0\1\u012d\1\u012e\2\u012d\1\0\3\u012d"+
    "\1\u012e\45\u012d\1\u015d\21\u012d\16\0\1\u0130\53\0\1\u015e"+
    "\37\0\1\u015f\15\0\3\u015f\2\0\1\u015f\11\0\1\u015f"+
    "\1\0\2\u015f\11\0\1\u015f\2\0\3\u015f\3\0\1\u015f"+
    "\20\0\1\u0160\1\0\1\u0133\5\0\1\u0133\6\0\6\u0133"+
    "\1\0\13\u0133\1\0\12\u0133\1\u0161\3\0\4\u0133\1\0"+
    "\4\u0133\2\0\1\u0133\5\0\1\u0162\4\u0133\10\0\1\u0163"+
    "\5\0\1\u0163\6\0\6\u0163\1\0\13\u0163\1\0\12\u0163"+
    "\4\0\4\u0163\1\0\4\u0163\2\0\1\u0163\6\0\4\u0163"+
    "\22\u0164\1\0\41\u0164\1\0\27\u0164\6\0\1\104\1\u0165"+
    "\2\104\4\0\1\104\6\0\6\104\1\0\13\104\1\0"+
    "\12\104\4\0\4\104\1\0\7\104\1\0\2\104\3\0"+
    "\4\104\6\0\4\104\4\0\1\104\6\0\6\104\1\0"+
    "\11\104\1\u0166\1\104\1\0\1\u0166\11\104\4\0\4\104"+
    "\1\0\7\104\1\0\2\104\3\0\4\104\1\136\3\0"+
    "\2\136\1\u0167\1\136\1\u013b\5\136\1\u013b\6\136\6\u0133"+
    "\1\136\13\u0133\1\136\12\u0133\1\u0168\3\136\4\u0133\1\136"+
    "\4\u0133\1\0\1\136\1\u0133\1\136\1\0\4\136\4\u0133"+
    "\1\136\3\0\4\136\1\u0169\5\136\1\u0169\6\136\6\u0163"+
    "\1\136\13\u0163\1\136\12\u0163\4\136\4\u0163\1\136\4\u0163"+
    "\1\0\1\136\1\u0163\1\136\1\0\4\136\4\u0163\1\u016a"+
    "\3\u0164\16\u016a\1\136\2\u016a\6\u0164\1\u016a\13\u0164\1\u016a"+
    "\12\u0164\2\u016a\1\136\1\u016a\4\u0164\1\u016a\5\u0164\1\u016a"+
    "\1\u0164\1\u016a\1\u0164\4\u016a\4\u0164\1\152\2\0\1\333"+
    "\1\152\1\0\2\152\1\u013e\1\152\1\0\1\152\2\0"+
    "\1\u013e\5\152\1\0\6\u013e\1\152\13\u013e\1\152\12\u013e"+
    "\1\u016b\3\152\4\u013e\1\152\4\u013e\2\152\1\u013e\6\152"+
    "\4\u013e\1\152\2\0\1\333\1\152\1\0\2\152\1\u016c"+
    "\1\152\1\0\1\152\2\0\1\u016c\5\152\1\0\6\u016c"+
    "\1\152\13\u016c\1\152\12\u016c\4\152\4\u016c\1\152\4\u016c"+
    "\2\152\1\u016c\6\152\4\u016c\1\u016d\2\u0164\1\u016e\1\u016d"+
    "\1\u0164\4\u016d\1\u0164\1\u016d\2\u0164\4\u016d\1\152\1\u016d"+
    "\1\u0164\37\u016d\1\152\27\u016d\37\0\1\u016f\14\0\1\u016f"+
    "\70\0\2\u0170\110\0\2\u0171\122\0\1\u0172\14\0\1\u0172"+
    "\70\0\2\u0173\64\0\2\u0174\1\0\4\u0174\2\0\1\363"+
    "\4\u0174\1\0\11\u0174\1\0\27\u0174\1\0\13\u0174\2\0"+
    "\1\u0174\4\0\1\u0174\1\0\4\u0174\3\0\2\u0175\1\0"+
    "\4\u0175\2\0\1\u0107\4\u0175\1\0\11\u0175\1\0\27\u0175"+
    "\1\0\13\u0175\2\0\1\u0175\4\0\1\u0175\1\0\4\u0175"+
    "\2\210\1\0\31\210\1\u0176\57\210\3\0\2\u0177\1\0"+
    "\4\u0177\2\0\1\u0112\4\u0177\1\0\11\u0177\1\0\27\u0177"+
    "\1\0\13\u0177\2\0\1\u0177\4\0\1\u0177\1\0\4\u0177"+
    "\2\217\1\0\31\217\1\u0178\57\217\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\5\u0115\1\u0179\5\u0115\1\0"+
    "\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115"+
    "\3\0\4\u0115\10\0\1\u017a\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0"+
    "\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\1\u0115"+
    "\1\u017b\2\u0115\10\0\1\u0115\5\0\1\u0115\6\0\5\u0115"+
    "\1\u017c\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115"+
    "\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115"+
    "\5\0\1\u0115\6\0\6\u0115\1\0\5\u0115\1\u017d\5\u0115"+
    "\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0"+
    "\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0"+
    "\6\u0115\1\0\13\u0115\1\0\4\u0115\1\u017e\5\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115"+
    "\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0"+
    "\4\u0115\3\0\2\u0115\1\u017f\1\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\5\u0115\1\u0180"+
    "\4\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115"+
    "\3\0\4\u0115\2\0\1\u0181\146\0\1\u0182\150\0\1\u015d"+
    "\37\0\1\u015f\15\0\3\u015f\2\0\1\u015f\11\0\1\u015f"+
    "\1\0\2\u015f\11\0\1\u015f\1\0\1\u015e\3\u015f\3\0"+
    "\1\u015f\22\0\1\u0183\5\0\1\u0183\6\0\6\u0183\1\0"+
    "\13\u0183\1\0\12\u0183\4\0\4\u0183\1\0\4\u0183\2\0"+
    "\1\u0183\6\0\4\u0183\22\u0184\1\0\41\u0184\1\0\27\u0184"+
    "\6\0\1\u0185\1\0\1\u0163\5\0\1\u0163\6\0\6\u0163"+
    "\1\0\13\u0163\1\0\12\u0163\1\u0186\3\0\4\u0163\1\0"+
    "\4\u0163\2\0\1\u0163\6\0\4\u0163\22\u0164\1\u0187\41\u0164"+
    "\1\u0188\27\u0164\6\0\4\104\4\0\1\104\6\0\6\104"+
    "\1\0\7\104\1\u0189\3\104\1\0\12\104\4\0\4\104"+
    "\1\0\7\104\1\0\2\104\3\0\4\104\6\0\4\104"+
    "\4\0\1\104\6\0\6\104\1\0\6\104\1\u018a\4\104"+
    "\1\0\12\104\4\0\1\104\1\u018a\2\104\1\0\7\104"+
    "\1\0\2\104\3\0\4\104\1\136\3\0\4\136\1\u018b"+
    "\5\136\1\u018b\6\136\6\u0183\1\136\13\u0183\1\136\12\u0183"+
    "\4\136\4\u0183\1\136\4\u0183\1\0\1\136\1\u0183\1\136"+
    "\1\0\4\136\4\u0183\1\u018c\3\u0184\16\u018c\1\136\2\u018c"+
    "\6\u0184\1\u018c\13\u0184\1\u018c\12\u0184\2\u018c\1\136\1\u018c"+
    "\4\u0184\1\u018c\5\u0184\1\u018c\1\u0184\1\u018c\1\u0184\4\u018c"+
    "\4\u0184\1\136\3\0\2\136\1\u018d\1\136\1\u0169\5\136"+
    "\1\u0169\6\136\6\u0163\1\136\13\u0163\1\136\12\u0163\1\u018e"+
    "\3\136\4\u0163\1\136\4\u0163\1\0\1\136\1\u0163\1\136"+
    "\1\0\4\136\4\u0163\1\u016a\3\u0164\16\u016a\1\u018f\2\u016a"+
    "\6\u0164\1\u016a\13\u0164\1\u016a\12\u0164\2\u016a\1\u0190\1\u016a"+
    "\4\u0164\1\u016a\5\u0164\1\u016a\1\u0164\1\u016a\1\u0164\4\u016a"+
    "\4\u0164\1\u0191\2\u0184\1\u0192\1\u0191\1\u0184\4\u0191\1\u0184"+
    "\1\u0191\2\u0184\4\u0191\1\152\1\u0191\1\u0184\37\u0191\1\152"+
    "\27\u0191\1\152\2\0\1\333\1\152\1\0\2\152\1\u016c"+
    "\1\152\1\0\1\152\2\0\1\u016c\5\152\1\0\6\u016c"+
    "\1\152\13\u016c\1\152\12\u016c\1\u0193\3\152\4\u016c\1\152"+
    "\4\u016c\2\152\1\u016c\6\152\4\u016c\1\u016d\2\u0164\1\u016e"+
    "\1\u016d\1\u0164\4\u016d\1\u0164\1\u016d\2\u0164\4\u016d\1\u0194"+
    "\1\u016d\1\u0164\37\u016d\1\u0195\27\u016d\51\0\1\u0196\5\0"+
    "\1\u0196\100\0\1\u0197\13\0\1\u0197\74\0\1\u0198\11\0"+
    "\1\u0198\101\0\1\u0199\11\0\1\u0199\104\0\1\u019a\13\0"+
    "\1\u019a\33\0\2\210\1\0\32\210\1\u019b\56\210\2\217"+
    "\1\0\32\217\1\u019c\56\217\10\0\1\u019d\5\0\1\u0115"+
    "\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\10\u0115\1\u019e"+
    "\2\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\2\u0115"+
    "\1\u019f\1\u0115\2\0\4\u0115\3\0\1\u0115\1\u01a0\2\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\10\u0115"+
    "\1\u01a1\2\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0"+
    "\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\1\u0115"+
    "\1\u01a2\2\u0115\10\0\1\u01a3\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0"+
    "\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\6\u0115\1\u01a4\4\u0115\1\0"+
    "\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115"+
    "\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\5\u0115\1\u01a5\5\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0"+
    "\12\u0115\1\u0116\3\0\4\u0115\1\0\2\u0115\1\u01a6\1\u0115"+
    "\2\0\4\u0115\3\0\4\u0115\36\0\1\u01a7\63\0\1\u01a8"+
    "\1\0\1\u0183\5\0\1\u0183\6\0\6\u0183\1\0\13\u0183"+
    "\1\0\12\u0183\4\0\4\u0183\1\0\4\u0183\2\0\1\u0183"+
    "\5\0\1\u0162\4\u0183\22\u0184\1\u01a9\41\u0184\1\u01aa\27\u0184"+
    "\10\0\1\u01ab\5\0\1\u01ab\6\0\6\u01ab\1\0\13\u01ab"+
    "\1\0\12\u01ab\4\0\4\u01ab\1\0\4\u01ab\2\0\1\u01ab"+
    "\6\0\4\u01ab\22\u01ac\1\0\41\u01ac\1\0\27\u01ac\6\u0162"+
    "\1\u01ad\7\u0162\1\0\6\u0162\6\0\1\u0162\13\0\1\u0162"+
    "\12\0\4\u0162\4\0\1\u0162\4\0\2\u0162\1\0\6\u0162"+
    "\4\0\22\u01ae\1\0\41\u01ae\1\u0188\27\u01ae\6\0\4\104"+
    "\4\0\1\104\6\0\6\104\1\0\13\104\1\0\4\104"+
    "\1\u01af\5\104\4\0\4\104\1\0\7\104\1\0\2\104"+
    "\3\0\4\104\6\0\4\104\4\0\1\104\6\0\6\104"+
    "\1\0\3\104\1\u01b0\7\104\1\0\4\104\1\u01b0\5\104"+
    "\4\0\4\104\1\0\7\104\1\0\2\104\3\0\4\104"+
    "\1\136\3\0\2\136\1\u01b1\1\136\1\u018b\5\136\1\u018b"+
    "\6\136\6\u0183\1\136\13\u0183\1\136\12\u0183\4\136\4\u0183"+
    "\1\136\4\u0183\1\0\1\136\1\u0183\1\136\1\0\4\136"+
    "\4\u0183\1\u018c\3\u0184\16\u018c\1\u01b2\2\u018c\6\u0184\1\u018c"+
    "\13\u0184\1\u018c\12\u0184\2\u018c\1\u01b3\1\u018c\4\u0184\1\u018c"+
    "\5\u0184\1\u018c\1\u0184\1\u018c\1\u0184\4\u018c\4\u0184\1\136"+
    "\3\0\4\136\1\u018d\5\136\1\u018d\6\136\6\u01ab\1\136"+
    "\13\u01ab\1\136\12\u01ab\4\136\4\u01ab\1\136\4\u01ab\1\0"+
    "\1\136\1\u01ab\1\136\1\0\4\136\4\u01ab\1\u01b4\3\u01ac"+
    "\16\u01b4\1\136\2\u01b4\6\u01ac\1\u01b4\13\u01ac\1\u01b4\12\u01ac"+
    "\2\u01b4\1\136\1\u01b4\4\u01ac\1\u01b4\5\u01ac\1\u01b4\1\u01ac"+
    "\1\u01b4\1\u01ac\4\u01b4\4\u01ac\1\136\3\u0162\2\136\1\u01b5"+
    "\16\136\6\0\1\136\13\0\1\136\12\0\4\136\4\0"+
    "\1\136\4\0\1\u0162\1\136\1\0\1\136\1\u0162\4\136"+
    "\4\0\1\u01b6\3\u01ae\16\u01b6\1\136\2\u01b6\6\u01ae\1\u01b6"+
    "\13\u01ae\1\u01b6\12\u01ae\2\u01b6\1\u0190\1\u01b6\4\u01ae\1\u01b6"+
    "\5\u01ae\1\u01b6\1\u01ae\1\u01b6\1\u01ae\4\u01b6\4\u01ae\1\u0191"+
    "\2\u0184\1\u0192\1\u0191\1\u0184\4\u0191\1\u0184\1\u0191\2\u0184"+
    "\4\u0191\1\152\1\u0191\1\u0184\37\u0191\1\u01b7\27\u0191\1\u01b8"+
    "\2\u01ac\1\u01b9\1\u01b8\1\u01ac\4\u01b8\1\u01ac\1\u01b8\2\u01ac"+
    "\4\u01b8\1\152\1\u01b8\1\u01ac\37\u01b8\1\152\27\u01b8\1\152"+
    "\2\u0162\1\u01ba\1\152\1\u0162\1\u01bb\3\152\1\u0162\1\152"+
    "\2\u0162\6\152\1\u0162\67\152\1\u01bc\2\u01ae\1\u01bd\1\u01bc"+
    "\1\u01ae\4\u01bc\1\u01ae\1\u01bc\2\u01ae\4\u01bc\1\152\1\u01bc"+
    "\1\u01ae\37\u01bc\1\u0195\27\u01bc\52\0\1\u01be\104\0\1\u01bf"+
    "\22\0\1\u01bf\73\0\1\u01c0\12\0\1\u01c0\61\0\2\u01c1"+
    "\117\0\1\u01c2\40\0\1\u01c2\16\0\2\210\1\0\33\210"+
    "\1\u01c3\55\210\2\217\1\0\33\217\1\u01c4\55\217\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\10\u0115\1\u01c5"+
    "\2\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115"+
    "\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115"+
    "\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\1\u01c6\3\u0115\3\0\4\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\11\u0115"+
    "\1\u01c7\1\u0115\1\0\5\u0115\1\u01c8\4\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\12\u0115\1\u01c9"+
    "\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0"+
    "\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0"+
    "\6\u0115\1\0\6\u0115\1\u01ca\4\u0115\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115"+
    "\1\0\6\u0115\1\u01cb\3\u0115\1\u0116\3\0\4\u0115\1\0"+
    "\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\4\u0115\1\u01cc"+
    "\5\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115"+
    "\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\11\u0115\1\u01cd\1\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0"+
    "\6\u0115\1\u01ce\3\u0115\1\u0116\3\0\4\u0115\1\0\1\u01cf"+
    "\3\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\2\u0115"+
    "\1\u01d0\1\u0115\37\0\1\u01d1\64\0\1\u01d2\5\0\1\u01d2"+
    "\6\0\6\u01d2\1\0\13\u01d2\1\0\12\u01d2\4\0\4\u01d2"+
    "\1\0\4\u01d2\2\0\1\u01d2\6\0\4\u01d2\6\0\1\u0160"+
    "\100\0\1\u0162\4\0\22\u01d3\1\0\41\u01d3\1\u01aa\27\u01d3"+
    "\22\u01ac\1\u01d4\41\u01ac\1\u01d5\27\u01ac\10\0\1\u01d6\5\0"+
    "\1\u01d6\6\0\6\u01d6\1\0\13\u01d6\1\0\12\u01d6\4\0"+
    "\4\u01d6\1\0\4\u01d6\2\0\1\u01d6\6\0\4\u01d6\22\u01ae"+
    "\1\u0187\41\u01ae\1\0\27\u01ae\6\0\4\104\4\0\1\104"+
    "\6\0\6\104\1\0\13\104\1\0\7\104\1\u01d7\2\104"+
    "\4\0\4\104\1\0\7\104\1\0\2\104\3\0\4\104"+
    "\5\0\1\u01d8\4\104\3\0\1\u01d8\1\104\5\0\1\u01d8"+
    "\6\104\1\0\13\104\1\0\12\104\4\0\4\104\1\0"+
    "\7\104\1\0\2\104\3\0\4\104\1\136\3\0\4\136"+
    "\1\u01b1\5\136\1\u01b1\6\136\6\u01d2\1\136\13\u01d2\1\136"+
    "\12\u01d2\4\136\4\u01d2\1\136\4\u01d2\1\0\1\136\1\u01d2"+
    "\1\136\1\0\4\136\4\u01d2\1\136\3\0\2\136\1\u0167"+
    "\16\136\6\0\1\136\13\0\1\136\12\0\4\136\4\0"+
    "\1\136\5\0\1\136\1\0\1\136\1\0\4\136\4\0"+
    "\1\u01d9\3\u01d3\16\u01d9\1\136\2\u01d9\6\u01d3\1\u01d9\13\u01d3"+
    "\1\u01d9\12\u01d3\2\u01d9\1\u01b3\1\u01d9\4\u01d3\1\u01d9\5\u01d3"+
    "\1\u01d9\1\u01d3\1\u01d9\1\u01d3\4\u01d9\4\u01d3\1\u01b4\3\u01ac"+
    "\16\u01b4\1\u01da\2\u01b4\6\u01ac\1\u01b4\13\u01ac\1\u01b4\12\u01ac"+
    "\2\u01b4\1\u01db\1\u01b4\4\u01ac\1\u01b4\5\u01ac\1\u01b4\1\u01ac"+
    "\1\u01b4\1\u01ac\4\u01b4\4\u01ac\1\136\3\0\4\136\1\u01dc"+
    "\5\136\1\u01dc\6\136\6\u01d6\1\136\13\u01d6\1\136\12\u01d6"+
    "\4\136\4\u01d6\1\136\4\u01d6\1\0\1\136\1\u01d6\1\136"+
    "\1\0\4\136\4\u01d6\1\u01b6\3\u01ae\16\u01b6\1\u018f\2\u01b6"+
    "\6\u01ae\1\u01b6\13\u01ae\1\u01b6\12\u01ae\2\u01b6\1\136\1\u01b6"+
    "\4\u01ae\1\u01b6\5\u01ae\1\u01b6\1\u01ae\1\u01b6\1\u01ae\4\u01b6"+
    "\4\u01ae\1\u01dd\2\u01d3\1\u01de\1\u01dd\1\u01d3\4\u01dd\1\u01d3"+
    "\1\u01dd\2\u01d3\4\u01dd\1\152\1\u01dd\1\u01d3\37\u01dd\1\u01b7"+
    "\27\u01dd\1\u01b8\2\u01ac\1\u01b9\1\u01b8\1\u01ac\4\u01b8\1\u01ac"+
    "\1\u01b8\2\u01ac\4\u01b8\1\u01df\1\u01b8\1\u01ac\37\u01b8\1\u01e0"+
    "\27\u01b8\1\152\2\0\1\333\1\152\1\0\2\152\1\u01e1"+
    "\1\152\1\0\1\152\2\0\1\u01e1\5\152\1\0\6\u01e1"+
    "\1\152\13\u01e1\1\152\12\u01e1\4\152\4\u01e1\1\152\4\u01e1"+
    "\2\152\1\u01e1\6\152\4\u01e1\1\u01bc\2\u01ae\1\u01bd\1\u01bc"+
    "\1\u01ae\4\u01bc\1\u01ae\1\u01bc\2\u01ae\4\u01bc\1\u0194\1\u01bc"+
    "\1\u01ae\37\u01bc\1\152\27\u01bc\41\0\1\u01e2\11\0\1\u01e2"+
    "\77\0\1\u01e3\14\0\1\u01e3\76\0\1\u01e4\14\0\1\u01e4"+
    "\37\0\2\210\1\0\34\210\1\u01e5\54\210\2\217\1\0"+
    "\34\217\1\u01e6\54\217\10\0\1\u0115\5\0\1\u0115\6\0"+
    "\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115"+
    "\1\0\4\u0115\2\0\1\u011c\3\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\12\u0115\1\u01e7"+
    "\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0"+
    "\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0"+
    "\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115"+
    "\1\0\2\u0115\1\u01e8\1\u0115\2\0\4\u0115\3\0\4\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115"+
    "\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\2\u0115\1\u01e9"+
    "\1\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\5\u0115\1\u01ea\5\u0115\1\0"+
    "\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115"+
    "\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\5\u0115\1\u01eb\5\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0"+
    "\5\u0115\1\u01ec\4\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115"+
    "\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115"+
    "\6\0\5\u0115\1\u01ed\1\0\13\u0115\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\5\u0115\1\u01ee\1\0"+
    "\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115"+
    "\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115"+
    "\6\0\6\u0115\1\0\5\u0115\1\u01ef\5\u0115\1\0\12\u0115"+
    "\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0"+
    "\4\u0115\36\0\1\u01f0\65\0\1\u01d2\5\0\1\u01d2\6\0"+
    "\6\u01d2\1\0\13\u01d2\1\0\12\u01d2\4\0\4\u01d2\1\0"+
    "\4\u01d2\2\0\1\u01d2\5\0\1\u0162\4\u01d2\22\u01d3\1\u01a9"+
    "\41\u01d3\1\0\27\u01d3\16\u0162\1\0\6\u0162\6\0\1\u0162"+
    "\13\0\1\u0162\12\0\4\u0162\4\0\1\u0162\4\0\2\u0162"+
    "\1\0\6\u0162\4\0\22\u01f1\1\0\41\u01f1\1\u01d5\27\u01f1"+
    "\6\u0162\1\u01f2\1\u0162\1\u01f3\5\u0162\1\u01d6\6\u0162\6\u01d6"+
    "\1\u0162\13\u01d6\1\u0162\12\u01d6\4\u0162\4\u01d6\1\u0162\4\u01d6"+
    "\2\u0162\1\u01d6\6\u0162\4\u01d6\6\0\4\104\4\0\1\104"+
    "\6\0\5\104\1\u01f4\1\0\13\104\1\0\12\104\4\0"+
    "\4\104\1\0\7\104\1\0\2\104\3\0\4\104\5\0"+
    "\1\u01d8\7\0\1\u01d8\6\0\1\u01d8\67\0\1\u01d9\3\u01d3"+
    "\16\u01d9\1\u01b2\2\u01d9\6\u01d3\1\u01d9\13\u01d3\1\u01d9\12\u01d3"+
    "\2\u01d9\1\136\1\u01d9\4\u01d3\1\u01d9\5\u01d3\1\u01d9\1\u01d3"+
    "\1\u01d9\1\u01d3\4\u01d9\4\u01d3\1\136\3\u0162\21\136\6\0"+
    "\1\136\13\0\1\136\12\0\4\136\4\0\1\136\4\0"+
    "\1\u0162\1\136\1\0\1\136\1\u0162\4\136\4\0\1\u01f5"+
    "\3\u01f1\16\u01f5\1\136\2\u01f5\6\u01f1\1\u01f5\13\u01f1\1\u01f5"+
    "\12\u01f1\2\u01f5\1\u01db\1\u01f5\4\u01f1\1\u01f5\5\u01f1\1\u01f5"+
    "\1\u01f1\1\u01f5\1\u01f1\4\u01f5\4\u01f1\1\136\3\u0162\2\136"+
    "\1\u01f6\1\136\1\u01dc\5\136\1\u01dc\6\136\6\u01d6\1\136"+
    "\13\u01d6\1\136\12\u01d6\4\136\4\u01d6\1\136\4\u01d6\1\u0162"+
    "\1\136\1\u01d6\1\136\1\u0162\4\136\4\u01d6\1\u01dd\2\u01d3"+
    "\1\u01de\1\u01dd\1\u01d3\4\u01dd\1\u01d3\1\u01dd\2\u01d3\4\u01dd"+
    "\1\152\1\u01dd\1\u01d3\37\u01dd\1\152\27\u01dd\1\152\2\u0162"+
    "\1\u01ba\1\152\1\u0162\4\152\1\u0162\1\152\2\u0162\6\152"+
    "\1\u0162\67\152\1\u01f7\2\u01f1\1\u01f8\1\u01f7\1\u01f1\4\u01f7"+
    "\1\u01f1\1\u01f7\2\u01f1\4\u01f7\1\152\1\u01f7\1\u01f1\37\u01f7"+
    "\1\u01e0\27\u01f7\1\152\2\u0162\1\u01ba\1\152\1\u0162\1\u01f9"+
    "\1\152\1\u01e1\1\152\1\u0162\1\152\2\u0162\1\u01e1\5\152"+
    "\1\u0162\6\u01e1\1\152\13\u01e1\1\152\12\u01e1\4\152\4\u01e1"+
    "\1\152\4\u01e1\2\152\1\u01e1\6\152\4\u01e1\2\210\1\0"+
    "\33\210\1\u01fa\55\210\2\217\1\0\33\217\1\u01fb\55\217"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115"+
    "\1\0\4\u0115\1\u01fc\5\u0115\1\u0116\3\0\4\u0115\1\0"+
    "\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\2\u0115"+
    "\1\u01fd\1\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\13\u0115\1\0\5\u0115\1\u01fe\4\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0"+
    "\12\u0115\1\u0116\3\0\4\u0115\1\0\3\u0115\1\u01ff\2\0"+
    "\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0"+
    "\6\u0115\1\0\11\u0115\1\u0200\1\u0115\1\0\12\u0115\1\u0116"+
    "\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115"+
    "\1\0\6\u0115\1\u0201\3\u0115\1\u0116\3\0\4\u0115\1\0"+
    "\4\u0115\2\0\4\u0115\3\0\4\u0115\33\0\1\u0202\60\0"+
    "\22\u01f1\1\u01d4\41\u01f1\1\0\27\u01f1\10\0\1\u0203\5\0"+
    "\1\u0203\6\0\6\u0203\1\0\13\u0203\1\0\12\u0203\4\0"+
    "\4\u0203\1\0\4\u0203\2\0\1\u0203\6\0\4\u0203\6\0"+
    "\4\104\4\0\1\104\6\0\6\104\1\0\5\104\1\u0204"+
    "\5\104\1\0\12\104\4\0\4\104\1\0\7\104\1\0"+
    "\2\104\3\0\4\104\1\u01f5\3\u01f1\16\u01f5\1\u01da\2\u01f5"+
    "\6\u01f1\1\u01f5\13\u01f1\1\u01f5\12\u01f1\2\u01f5\1\136\1\u01f5"+
    "\4\u01f1\1\u01f5\5\u01f1\1\u01f5\1\u01f1\1\u01f5\1\u01f1\4\u01f5"+
    "\4\u01f1\1\136\3\0\4\136\1\u0205\5\136\1\u0205\6\136"+
    "\6\u0203\1\136\13\u0203\1\136\12\u0203\4\136\4\u0203\1\136"+
    "\4\u0203\1\0\1\136\1\u0203\1\136\1\0\4\136\4\u0203"+
    "\1\u01f7\2\u01f1\1\u01f8\1\u01f7\1\u01f1\4\u01f7\1\u01f1\1\u01f7"+
    "\2\u01f1\4\u01f7\1\u01df\1\u01f7\1\u01f1\37\u01f7\1\152\27\u01f7"+
    "\1\152\2\0\1\333\1\152\1\0\2\152\1\u0206\1\152"+
    "\1\0\1\152\2\0\1\u0206\5\152\1\0\6\u0206\1\152"+
    "\13\u0206\1\152\12\u0206\4\152\4\u0206\1\152\4\u0206\2\152"+
    "\1\u0206\6\152\4\u0206\2\210\1\0\30\210\1\u0207\60\210"+
    "\2\217\1\0\30\217\1\u0208\60\217\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\6\u0115\1\0\6\u0115\1\u0209\4\u0115\1\0"+
    "\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115"+
    "\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\5\u0115\1\u020a\5\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0"+
    "\12\u0115\1\u0116\3\0\4\u0115\1\0\2\u0115\1\u020b\1\u0115"+
    "\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115"+
    "\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\2\u0115\1\u020c\1\u0115\2\0\4\u0115\3\0"+
    "\4\u0115\10\u0162\1\u020d\5\u0162\1\u0203\6\u0162\6\u0203\1\u0162"+
    "\13\u0203\1\u0162\12\u0203\4\u0162\4\u0203\1\u0162\4\u0203\2\u0162"+
    "\1\u0203\6\u0162\4\u0203\6\0\4\104\4\0\1\104\6\0"+
    "\6\104\1\0\7\104\1\u020e\3\104\1\0\12\104\4\0"+
    "\4\104\1\0\7\104\1\0\2\104\3\0\4\104\1\136"+
    "\3\u0162\4\136\1\u0205\5\136\1\u0205\6\136\6\u0203\1\136"+
    "\13\u0203\1\136\12\u0203\4\136\4\u0203\1\136\4\u0203\1\u0162"+
    "\1\136\1\u0203\1\136\1\u0162\4\136\4\u0203\1\152\2\u0162"+
    "\1\u01ba\1\152\1\u0162\2\152\1\u0206\1\152\1\u0162\1\152"+
    "\2\u0162\1\u0206\5\152\1\u0162\6\u0206\1\152\13\u0206\1\152"+
    "\12\u0206\4\152\4\u0206\1\152\4\u0206\2\152\1\u0206\6\152"+
    "\4\u0206\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0"+
    "\11\u0115\1\u020f\1\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115"+
    "\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115"+
    "\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0\6\u0115"+
    "\1\u0210\3\u0115\1\u0116\3\0\4\u0115\1\0\1\u0211\3\u0115"+
    "\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0\1\u0115"+
    "\6\0\6\u0115\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\2\u0115\1\u0212"+
    "\1\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0"+
    "\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115"+
    "\2\0\4\u0115\3\0\3\u0115\1\u01ce\6\0\4\104\4\0"+
    "\1\104\6\0\6\104\1\0\13\104\1\0\12\104\4\0"+
    "\4\104\1\0\7\104\1\0\2\104\3\0\2\104\1\u0213"+
    "\1\104\10\0\1\u0115\5\0\1\u0115\6\0\5\u0115\1\u0214"+
    "\1\0\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0"+
    "\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0\1\u0115\5\0"+
    "\1\u0115\6\0\5\u0115\1\u0215\1\0\13\u0115\1\0\12\u0115"+
    "\1\u0116\3\0\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0"+
    "\4\u0115\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0"+
    "\5\u0115\1\u0216\5\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115"+
    "\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\6\0\4\104"+
    "\4\0\1\104\6\0\6\104\1\0\5\104\1\u0217\5\104"+
    "\1\0\12\104\4\0\4\104\1\0\7\104\1\0\2\104"+
    "\3\0\4\104\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115"+
    "\1\0\11\u0115\1\u0218\1\u0115\1\0\12\u0115\1\u0116\3\0"+
    "\4\u0115\1\0\4\u0115\2\0\4\u0115\3\0\4\u0115\10\0"+
    "\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115\1\0"+
    "\6\u0115\1\u0219\3\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115"+
    "\2\0\4\u0115\3\0\4\u0115\6\0\4\104\4\0\1\104"+
    "\6\0\6\104\1\0\5\104\1\u021a\5\104\1\0\12\104"+
    "\4\0\4\104\1\0\7\104\1\0\2\104\3\0\4\104"+
    "\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0\13\u0115"+
    "\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\2\u0115\1\u021b"+
    "\1\u0115\2\0\4\u0115\3\0\4\u0115\6\0\4\104\4\0"+
    "\1\104\6\0\6\104\1\0\13\104\1\0\4\104\1\u021c"+
    "\5\104\4\0\4\104\1\0\7\104\1\0\2\104\3\0"+
    "\4\104\10\0\1\u0115\5\0\1\u0115\6\0\6\u0115\1\0"+
    "\13\u0115\1\0\12\u0115\1\u0116\3\0\4\u0115\1\0\4\u0115"+
    "\2\0\4\u0115\3\0\3\u0115\1\u0210";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  1,  1,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1, 
     1,  9,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1, 
     9,  1,  1,  9,  9,  1,  1,  0,  1,  0,  9,  1,  1,  0,  1,  0, 
     0,  0,  9,  1,  1,  1,  9,  9,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  9,  1,  1,  0,  0,  0,  9,  0,  0, 
     1,  1,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  1,  0, 
     0,  1,  1,  0,  0,  1,  0,  0,  0,  9,  0,  0,  0,  1,  0,  0, 
     0,  9,  1,  0,  0,  1,  1,  0,  1,  0,  0,  0,  9,  1,  0,  0, 
     1,  1,  0,  1,  0,  9,  9,  0,  0,  0,  0,  1,  0,  0,  0,  0, 
     0,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  1,  1,  1,  9,  0, 
     0,  9,  0,  0,  0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0,  1,  0,  1, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  1,  9,  0,  0, 
     0,  9,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  0,  0,  0, 
     9,  9,  1,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  9,  9,  9,  1,  1,  0,  0,  0,  1,  1,  0,  1,  0,  0,  0, 
     0,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  0,  0,  0,  1,  0, 
     1,  9,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  0,  1, 
     0,  0,  1,  1,  0,  0,  1,  0,  1,  1,  0,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  // private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    public static boolean debugTokenizer = false;
    
	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	private String f_context = null;

	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();

	private String context = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	private XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public final boolean isCaseSensitiveBlocking() {
	return fIsCaseSensitiveBlocking;
}
/* user method */
public final void setCaseSensitiveBlocking(boolean newValue) {
	fIsCaseSensitiveBlocking = newValue;
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	XML_END_TAG_OPEN: 41-42
 *	XML_TAG_NAME: 43-48
 *	XML_TAG_CLOSE: 49-49
 *	XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && yy_currentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			same = true;
			// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
			// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			
			// safety check for array accesses (yy_currentPos is the *last* character we can check against)
			if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
				for(i = 0; i < searchStringLength; i++) {
					if(same && fIsCaseSensitiveBlocking)
						same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
					else if(same && !fIsCaseSensitiveBlocking)
						same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
				}
			}
			// safety check failed; no match is possible right now
			else {
				same = false;
			}
			if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = yy_buffer[yy_currentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		yy_markedPos = yy_currentPos - searchStringLength;
		yy_currentPos = yy_markedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (yy_markedPos == yy_startRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		yy_markedPos = yy_currentPos;
		yy_currentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(yy_markedPos == yy_startRead)
		return primGetNextToken();
	return searchContext;
}
/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}
/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		context = fBufferedContext;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == XML_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = yytext();
			else
				fCurrentTagName = null;
		}
		else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (yy_atEOF) {
			fTokenCount++;
			return null;
		}
	}
	// store the next token
	f_context = primGetNextToken();
	if (f_context == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	}
	else if (f_context == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (f_context == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	fShouldLoadBuffered = true;
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}
	if (context == null) {
		// EOF
		if (SSTokenizer.debugTokenizer) {
			System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
		}
		return null;
	}
	fTokenCount++;
	return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
}
/* user method */
public SSTokenizer(){
	super();
}
/* user method */
public SSTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (SSTokenizer.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	yy_reader = in;

	/* the current state of the DFA */
	yy_state = 0;

	/* the current lexical state */
	yy_lexical_state = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(yy_buffer, (char)0);

	/* the textposition at the last accepting state */
	yy_markedPos = 0;

	/* the textposition at the last state to be included in yytext */
	//yy_pushbackPos = 0;

	/* the current text position in the buffer */
	yy_currentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	yy_startRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	yy_endRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	//yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* yy_atEOF == true <=> the scanner has returned a value for EOF */
	yy_atEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	yy_eof_done = false;


	/* user vars: */
	fTokenCount = 0;
 
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	start = 0;
	textLength = 0;
	length = 0;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		SSTokenizer newInstance = new SSTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanXMLCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_XML_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", false, XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}
/* user method */
private final String scanSSCommentText() throws IOException {
    // Scan for '--%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_COMMENT_END state and return the next
    //  context as usual.
    return doScan("--%>", false, SS_COMMENT_TEXT, ST_SS_COMMENT_END, ST_SS_COMMENT_END);
}
private final String scanSSConditionalText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CONDITIONAL_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CONDITIONAL_TEXT, ST_SS_CONDITIONAL_END, ST_SS_CONDITIONAL_END);
}
private final String scanSSRequirementText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_REQUIREMENT_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_REQUIREMENT_CONTENT, ST_SS_REQUIREMENT_END, ST_SS_REQUIREMENT_END);
}
private final String scanSSControlText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CONTROL_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CONTROL_CONTENT, ST_SS_CONTROL_END, ST_SS_CONTROL_END);
}
private final String scanSSIncludeText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_INCLUDE_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_INCLUDE_CONTENT, ST_SS_INCLUDE_END, ST_SS_INCLUDE_END);
}
private final String scanSSCacheBlockText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CACHEBLOCK_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_CACHEBLOCK_CONTENT, ST_SS_CACHEBLOCK_END, ST_SS_CACHEBLOCK_END);
}
private final String scanSSUncacheBlockText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_CACHEBLOCK_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_UNCACHED_CONTENT, ST_SS_UNCACHED_END, ST_SS_UNCACHED_END);
}
private final String scanSSTemplateFunctionText() throws IOException {
    // Scan for '%>' and return the text up to that point as
    //   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
    //  case change to the ST_SS_TEMPLATE_FUNCTION_END state and return the next
    //  context as usual.
    return doScan("%>", false, SS_TEMPLATE_FUNCTION_CONTENT, ST_SS_TEMPLATE_FUNCTION_END, ST_SS_TEMPLATE_FUNCTION_END);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SSTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SSTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[30020];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 10714) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1380) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		//if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		//}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 539: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XSL processing instruction target");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 541: break;
        case 536: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end uncache block");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_UNCACHED;
 }
        case 542: break;
        case 531: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end_control");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_CONTROL;
 }
        case 543: break;
        case 527: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end cache block");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_CACHEBLOCK;
 }
        case 544: break;
        case 513: 
        case 518: 
        case 519: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 545: break;
        case 512: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncached Start");//$NON-NLS-1$
    yybegin(ST_SS_CACHEBLOCK_CONTENT);
    return SS_UNCACHED_OPEN;
 }
        case 546: break;
        case 510: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe base_tag");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_BASE_TAG;
 }
        case 547: break;
        case 492: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control Start");//$NON-NLS-1$
    yybegin(ST_SS_CONTROL_CONTENT);
    return SS_CONTROL_OPEN;
 }
        case 548: break;
        case 490: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include Start");//$NON-NLS-1$
    yybegin(ST_SS_INCLUDE_CONTENT);
    return SS_INCLUDE_OPEN;
 }
        case 549: break;
        case 489: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement Start");//$NON-NLS-1$
    yybegin(ST_SS_REQUIREMENT_CONTENT);
    return SS_REQUIREMENT_OPEN;
 }
        case 550: break;
        case 483: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 551: break;
        case 482: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 552: break;
        case 481: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 553: break;
        case 461: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block Start");//$NON-NLS-1$
    yybegin(ST_SS_CACHEBLOCK_CONTENT);
    return SS_CACHEBLOCK_OPEN;
 }
        case 554: break;
        case 453: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end_if");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_END_IF;
 }
        case 555: break;
        case 449: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 556: break;
        case 448: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 557: break;
        case 431: 
        case 471: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction target");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 558: break;
        case 384: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe comment end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_COMMENT_CLOSE;
 }
        case 559: break;
        case 376: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe else");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_ELSE;
 }
        case 560: break;
        case 349: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 561: break;
        case 144: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (SSTokenizer.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 562: break;
        case 138: 
        case 140: 
        case 141: 
        case 268: 
        case 269: 
        case 272: 
        case 273: 
        case 333: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 563: break;
        case 137: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (SSTokenizer.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 564: break;
        case 131: 
        case 133: 
        case 134: 
        case 257: 
        case 258: 
        case 261: 
        case 262: 
        case 329: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 565: break;
        case 126: 
        case 128: 
        case 129: 
        case 130: 
        case 249: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 566: break;
        case 121: 
        case 123: 
        case 124: 
        case 125: 
        case 237: 
        case 238: 
        case 241: 
        case 242: 
        case 326: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 567: break;
        case 118: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 568: break;
        case 113: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (SSTokenizer.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 569: break;
        case 105: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 221: 
        case 224: 
        case 225: 
        case 317: 
        case 318: 
        case 319: 
        case 362: 
        case 363: 
        case 364: 
        case 400: 
        case 402: 
        case 403: 
        case 404: 
        case 438: 
        case 439: 
        case 442: 
        case 443: 
        case 476: 
        case 478: 
        case 479: 
        case 480: 
        case 502: 
        case 504: 
        case 517: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attr value");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 570: break;
        case 104: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("equals");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 571: break;
        case 102: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attr name");//$NON-NLS-1$
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 572: break;
        case 97: 
        case 99: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 573: break;
        case 95: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("tag close");//$NON-NLS-1$
	if(isBlockMarker()) {
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);
        return XML_TAG_CLOSE;
 }
        case 574: break;
        case 89: 
        case 91: 
        case 92: 
        case 212: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction attribute value");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 575: break;
        case 88: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction '='");//$NON-NLS-1$
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 576: break;
        case 86: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 577: break;
        case 84: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("DHTML processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 578: break;
        case 51: 
        case 188: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("non-reference %");//$NON-NLS-1$
	return XML_CONTENT;
 }
        case 579: break;
        case 50: 
        case 52: 
        case 53: 
        case 54: 
        case 59: 
        case 60: 
        case 64: 
        case 65: 
        case 75: 
        case 79: 
        case 83: 
        case 85: 
        case 87: 
        case 90: 
        case 96: 
        case 103: 
        case 106: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 119: 
        case 120: 
        case 122: 
        case 127: 
        case 132: 
        case 139: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 157: 
        case 160: 
        case 163: 
        case 166: 
        case 169: 
        case 172: 
        case 175: 
        case 178: 
          { 
	if (SSTokenizer.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 580: break;
        case 49: 
        case 94: 
        case 112: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
        yybegin(ST_XML_TAG_NAME);
        return XML_TAG_OPEN;
 }
        case 581: break;
        case 29: 
        case 142: 
        case 143: 
        case 275: 
        case 335: 
        case 375: 
        case 411: 
        case 451: 
        case 485: 
        case 506: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 582: break;
        case 27: 
        case 135: 
        case 136: 
        case 264: 
        case 331: 
        case 373: 
        case 410: 
        case 450: 
        case 484: 
        case 505: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 583: break;
        case 16: 
        case 93: 
        case 98: 
        case 100: 
        case 101: 
        case 216: 
        case 217: 
        case 314: 
        case 315: 
        case 316: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 472: 
        case 473: 
        case 474: 
        case 475: 
        case 500: 
        case 501: 
        case 516: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("inappropriate tag name");//$NON-NLS-1$
	yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 584: break;
        case 5: 
        case 8: 
        case 9: 
        case 10: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 28: 
        case 66: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 585: break;
        case 0: 
        case 48: 
        case 184: 
        case 187: 
        case 299: 
        case 300: 
        case 301: 
        case 348: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nXML content");//$NON-NLS-1$
	return XML_CONTENT;
 }
        case 586: break;
        case 55: 
        case 56: 
        case 57: 
        case 58: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
	if(blockContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return blockContext;
 }
        case 587: break;
        case 61: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 588: break;
        case 62: 
        case 63: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 589: break;
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 195: 
        case 196: 
        case 197: 
        case 313: 
        case 356: 
        case 357: 
        case 392: 
        case 393: 
        case 430: 
        case 470: 
        case 499: 
        case 515: 
        case 525: 
        case 530: 
        case 534: 
        case 537: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 590: break;
        case 71: 
          { 
        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 591: break;
        case 72: 
        case 73: 
        case 74: 
          { 
	// block scan until close is found
	return doScan("?>", false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 592: break;
        case 76: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 593: break;
        case 77: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 594: break;
        case 78: 
        case 80: 
        case 81: 
        case 82: 
        case 203: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 595: break;
        case 155: 
        case 156: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe comment content");//$NON-NLS-1$
    return scanSSCommentText();
 }
        case 596: break;
        case 158: 
        case 159: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe conditional content");//$NON-NLS-1$
    return scanSSConditionalText();
 }
        case 597: break;
        case 161: 
        case 162: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement content");//$NON-NLS-1$
    return scanSSRequirementText();
 }
        case 598: break;
        case 164: 
        case 165: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control content");//$NON-NLS-1$
    return scanSSControlText();
 }
        case 599: break;
        case 167: 
        case 168: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include content");//$NON-NLS-1$
    return scanSSIncludeText();
 }
        case 600: break;
        case 170: 
        case 171: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe template function content");//$NON-NLS-1$
    return scanSSTemplateFunctionText();
 }
        case 601: break;
        case 173: 
        case 174: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block content");//$NON-NLS-1$
    return scanSSCacheBlockText();
 }
        case 602: break;
        case 176: 
        case 177: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncached content");//$NON-NLS-1$
    return scanSSUncacheBlockText();
 }
        case 603: break;
        case 179: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nend tag open");//$NON-NLS-1$
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 604: break;
        case 180: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nprocessing instruction start");//$NON-NLS-1$
	yybegin(ST_PI);
        return XML_PI_OPEN;
 }
        case 605: break;
        case 181: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe start");//$NON-NLS-1$
    yybegin(ST_SS);
    return SS_OPEN;
 }
        case 606: break;
        case 182: 
          { 
	fStateStack.push(yystate());
	if(SSTokenizer.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 607: break;
        case 186: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe end");//$NON-NLS-1$
    //yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 608: break;
        case 190: 
        case 353: 
        case 354: 
        case 426: 
        case 428: 
        case 441: 
        case 497: 
        case 498: 
        case 524: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe Variable");//$NON-NLS-1$.
    return SS_VARIABLE;
 }
        case 609: break;
        case 194: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 610: break;
        case 198: 
          { 
		// ended with nothing inside
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 611: break;
        case 199: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction end");//$NON-NLS-1$
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 612: break;
        case 215: 
          { 
        yybegin(YYINITIAL);
	if(SSTokenizer.debugTokenizer)
		dump("empty tag close");//$NON-NLS-1$
        return XML_EMPTY_TAG_CLOSE;
 }
        case 613: break;
        case 231: 
        case 245: 
        case 253: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 614: break;
        case 277: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe template function Start");//$NON-NLS-1$
    yypushback(1);
    yybegin(ST_SS_TEMPLATE_FUNCTION_CONTENT);
    return SS_TEMPLATE_FUNCTION_OPEN;
 }
        case 615: break;
        case 278: 
          { 
    //if(SSTokenizer.debugTokenizer)
        dump("SilverStripe end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 616: break;
        case 283: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe conditional start");//$NON-NLS-1$
    yybegin(ST_SS_CONDITIONAL_CONTENT);
    return SS_CONDITIONAL_OPEN;
 }
        case 617: break;
        case 289: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe conditional end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 618: break;
        case 290: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe requirement end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 619: break;
        case 291: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe control end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 620: break;
        case 292: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe include end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 621: break;
        case 293: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe template function end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 622: break;
        case 294: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe cache block end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 623: break;
        case 295: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("SilverStripe uncache end");//$NON-NLS-1$
    yybegin(YYINITIAL);
    return SS_CLOSE;
 }
        case 624: break;
        case 302: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 625: break;
        case 305: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 626: break;
        case 309: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 627: break;
        case 310: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 628: break;
        case 311: 
        case 312: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 629: break;
        case 345: 
          { 
    if(SSTokenizer.debugTokenizer)
        dump("\nSilverStripe comment start");//$NON-NLS-1$
    yybegin(ST_SS_COMMENT);
    return SS_COMMENT_OPEN;
 }
        case 630: break;
        case 346: 
          { 
	if(SSTokenizer.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 631: break;
        case 145: 
        case 146: 
          { 
		return doBlockTagScan();
	 }
        case 632: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
